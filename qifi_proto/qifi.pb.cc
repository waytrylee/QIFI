// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qifi.proto

#include "qifi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bank_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Order_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trade_qifi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qifi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_qifi_2eproto;
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class BankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bank> _instance;
} _Bank_default_instance_;
class QIFI_SettlementEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_SettlementEntry_DoNotUse> _instance;
} _QIFI_SettlementEntry_DoNotUse_default_instance_;
class QIFI_BanksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_BanksEntry_DoNotUse> _instance;
} _QIFI_BanksEntry_DoNotUse_default_instance_;
class QIFI_EventEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_EventEntry_DoNotUse> _instance;
} _QIFI_EventEntry_DoNotUse_default_instance_;
class QIFI_OrdersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_OrdersEntry_DoNotUse> _instance;
} _QIFI_OrdersEntry_DoNotUse_default_instance_;
class QIFI_PositonsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_PositonsEntry_DoNotUse> _instance;
} _QIFI_PositonsEntry_DoNotUse_default_instance_;
class QIFI_TradesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_TradesEntry_DoNotUse> _instance;
} _QIFI_TradesEntry_DoNotUse_default_instance_;
class QIFI_TransfersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI_TransfersEntry_DoNotUse> _instance;
} _QIFI_TransfersEntry_DoNotUse_default_instance_;
class QIFIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QIFI> _instance;
} _QIFI_default_instance_;
static void InitDefaultsscc_info_Account_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Account_default_instance_;
    new (ptr) ::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Account_qifi_2eproto}, {}};

static void InitDefaultsscc_info_Bank_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Bank_default_instance_;
    new (ptr) ::Bank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Bank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bank_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Bank_qifi_2eproto}, {}};

static void InitDefaultsscc_info_Order_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Order_default_instance_;
    new (ptr) ::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Order_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Order_qifi_2eproto}, {}};

static void InitDefaultsscc_info_Position_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Position_default_instance_;
    new (ptr) ::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_qifi_2eproto}, {}};

static void InitDefaultsscc_info_QIFI_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_default_instance_;
    new (ptr) ::QIFI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QIFI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_QIFI_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_QIFI_qifi_2eproto}, {
      &scc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_Account_qifi_2eproto.base,
      &scc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto.base,
      &scc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto.base,}};

static void InitDefaultsscc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_BanksEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_BanksEntry_DoNotUse();
  }
  ::QIFI_BanksEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto}, {
      &scc_info_Bank_qifi_2eproto.base,}};

static void InitDefaultsscc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_EventEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_EventEntry_DoNotUse();
  }
  ::QIFI_EventEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto}, {}};

static void InitDefaultsscc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_OrdersEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_OrdersEntry_DoNotUse();
  }
  ::QIFI_OrdersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto}, {
      &scc_info_Order_qifi_2eproto.base,}};

static void InitDefaultsscc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_PositonsEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_PositonsEntry_DoNotUse();
  }
  ::QIFI_PositonsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto}, {
      &scc_info_Position_qifi_2eproto.base,}};

static void InitDefaultsscc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_SettlementEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_SettlementEntry_DoNotUse();
  }
  ::QIFI_SettlementEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto}, {}};

static void InitDefaultsscc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_TradesEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_TradesEntry_DoNotUse();
  }
  ::QIFI_TradesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto}, {
      &scc_info_Trade_qifi_2eproto.base,}};

static void InitDefaultsscc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QIFI_TransfersEntry_DoNotUse_default_instance_;
    new (ptr) ::QIFI_TransfersEntry_DoNotUse();
  }
  ::QIFI_TransfersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto}, {
      &scc_info_Transfer_qifi_2eproto.base,}};

static void InitDefaultsscc_info_Trade_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Trade_default_instance_;
    new (ptr) ::Trade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Trade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trade_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trade_qifi_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_qifi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Transfer_default_instance_;
    new (ptr) ::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Transfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_qifi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transfer_qifi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qifi_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_qifi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qifi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qifi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Account, user_id_),
  PROTOBUF_FIELD_OFFSET(::Account, currency_),
  PROTOBUF_FIELD_OFFSET(::Account, pre_balance_),
  PROTOBUF_FIELD_OFFSET(::Account, deposit_),
  PROTOBUF_FIELD_OFFSET(::Account, withdraw_),
  PROTOBUF_FIELD_OFFSET(::Account, withdrawquota_),
  PROTOBUF_FIELD_OFFSET(::Account, close_profit_),
  PROTOBUF_FIELD_OFFSET(::Account, commission_),
  PROTOBUF_FIELD_OFFSET(::Account, premium_),
  PROTOBUF_FIELD_OFFSET(::Account, static_balance_),
  PROTOBUF_FIELD_OFFSET(::Account, position_profit_),
  PROTOBUF_FIELD_OFFSET(::Account, float_profit_),
  PROTOBUF_FIELD_OFFSET(::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::Account, margin_),
  PROTOBUF_FIELD_OFFSET(::Account, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::Account, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::Account, frozen_premium_),
  PROTOBUF_FIELD_OFFSET(::Account, available_),
  PROTOBUF_FIELD_OFFSET(::Account, risk_ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Trade, seqno_),
  PROTOBUF_FIELD_OFFSET(::Trade, user_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, trade_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, order_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, exchange_trade_id_),
  PROTOBUF_FIELD_OFFSET(::Trade, direction_),
  PROTOBUF_FIELD_OFFSET(::Trade, offset_),
  PROTOBUF_FIELD_OFFSET(::Trade, volume_),
  PROTOBUF_FIELD_OFFSET(::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::Trade, trade_date_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Order, seqno_),
  PROTOBUF_FIELD_OFFSET(::Order, user_id_),
  PROTOBUF_FIELD_OFFSET(::Order, order_id_),
  PROTOBUF_FIELD_OFFSET(::Order, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::Order, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::Order, direction_),
  PROTOBUF_FIELD_OFFSET(::Order, offset_),
  PROTOBUF_FIELD_OFFSET(::Order, volume_orign_),
  PROTOBUF_FIELD_OFFSET(::Order, price_type_),
  PROTOBUF_FIELD_OFFSET(::Order, limit_price_),
  PROTOBUF_FIELD_OFFSET(::Order, time_condition_),
  PROTOBUF_FIELD_OFFSET(::Order, volume_condition_),
  PROTOBUF_FIELD_OFFSET(::Order, insert_date_time_),
  PROTOBUF_FIELD_OFFSET(::Order, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::Order, status_),
  PROTOBUF_FIELD_OFFSET(::Order, volume_left_),
  PROTOBUF_FIELD_OFFSET(::Order, last_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Position, user_id_),
  PROTOBUF_FIELD_OFFSET(::Position, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::Position, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_today_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_his_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_frozen_today_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_frozen_his_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_frozen_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_today_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_his_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_frozen_today_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_frozen_his_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_frozen_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_long_yd_),
  PROTOBUF_FIELD_OFFSET(::Position, volume_short_yd_),
  PROTOBUF_FIELD_OFFSET(::Position, pos_long_his_),
  PROTOBUF_FIELD_OFFSET(::Position, pos_long_today_),
  PROTOBUF_FIELD_OFFSET(::Position, pos_short_his_),
  PROTOBUF_FIELD_OFFSET(::Position, pos_short_today_),
  PROTOBUF_FIELD_OFFSET(::Position, open_price_long_),
  PROTOBUF_FIELD_OFFSET(::Position, open_price_short_),
  PROTOBUF_FIELD_OFFSET(::Position, open_cost_long_),
  PROTOBUF_FIELD_OFFSET(::Position, open_cost_short_),
  PROTOBUF_FIELD_OFFSET(::Position, position_price_long_),
  PROTOBUF_FIELD_OFFSET(::Position, position_price_short_),
  PROTOBUF_FIELD_OFFSET(::Position, position_cost_long_),
  PROTOBUF_FIELD_OFFSET(::Position, position_cost_short_),
  PROTOBUF_FIELD_OFFSET(::Position, last_price_),
  PROTOBUF_FIELD_OFFSET(::Position, float_profit_long_),
  PROTOBUF_FIELD_OFFSET(::Position, float_profit_short_),
  PROTOBUF_FIELD_OFFSET(::Position, float_profit_),
  PROTOBUF_FIELD_OFFSET(::Position, position_profit_long_),
  PROTOBUF_FIELD_OFFSET(::Position, position_profit_short_),
  PROTOBUF_FIELD_OFFSET(::Position, position_profit_),
  PROTOBUF_FIELD_OFFSET(::Position, margin_long_),
  PROTOBUF_FIELD_OFFSET(::Position, margin_short_),
  PROTOBUF_FIELD_OFFSET(::Position, margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Transfer, datetime_),
  PROTOBUF_FIELD_OFFSET(::Transfer, currency_),
  PROTOBUF_FIELD_OFFSET(::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::Transfer, error_id_),
  PROTOBUF_FIELD_OFFSET(::Transfer, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Bank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Bank, id_),
  PROTOBUF_FIELD_OFFSET(::Bank, name_),
  PROTOBUF_FIELD_OFFSET(::Bank, bank_account_),
  PROTOBUF_FIELD_OFFSET(::Bank, fetch_amount_),
  PROTOBUF_FIELD_OFFSET(::QIFI_SettlementEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_SettlementEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_SettlementEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_SettlementEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_BanksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_BanksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_BanksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_BanksEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_EventEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_EventEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_EventEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_EventEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_OrdersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_OrdersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_OrdersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_OrdersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_PositonsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_PositonsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_PositonsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_PositonsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_TradesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_TradesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_TradesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_TradesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QIFI_TransfersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QIFI_TransfersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI_TransfersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::QIFI_TransfersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QIFI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QIFI, databaseip_),
  PROTOBUF_FIELD_OFFSET(::QIFI, account_cookie_),
  PROTOBUF_FIELD_OFFSET(::QIFI, password_),
  PROTOBUF_FIELD_OFFSET(::QIFI, portfolio_),
  PROTOBUF_FIELD_OFFSET(::QIFI, broker_name_),
  PROTOBUF_FIELD_OFFSET(::QIFI, capital_password_),
  PROTOBUF_FIELD_OFFSET(::QIFI, bank_password_),
  PROTOBUF_FIELD_OFFSET(::QIFI, bankid_),
  PROTOBUF_FIELD_OFFSET(::QIFI, investor_name_),
  PROTOBUF_FIELD_OFFSET(::QIFI, money_),
  PROTOBUF_FIELD_OFFSET(::QIFI, pub_host_),
  PROTOBUF_FIELD_OFFSET(::QIFI, settlement_),
  PROTOBUF_FIELD_OFFSET(::QIFI, taskid_),
  PROTOBUF_FIELD_OFFSET(::QIFI, trade_host_),
  PROTOBUF_FIELD_OFFSET(::QIFI, updatetime_),
  PROTOBUF_FIELD_OFFSET(::QIFI, wsuri_),
  PROTOBUF_FIELD_OFFSET(::QIFI, bankname_),
  PROTOBUF_FIELD_OFFSET(::QIFI, trading_day_),
  PROTOBUF_FIELD_OFFSET(::QIFI, status_),
  PROTOBUF_FIELD_OFFSET(::QIFI, accounts_),
  PROTOBUF_FIELD_OFFSET(::QIFI, banks_),
  PROTOBUF_FIELD_OFFSET(::QIFI, event_),
  PROTOBUF_FIELD_OFFSET(::QIFI, orders_),
  PROTOBUF_FIELD_OFFSET(::QIFI, positons_),
  PROTOBUF_FIELD_OFFSET(::QIFI, trades_),
  PROTOBUF_FIELD_OFFSET(::QIFI, transfers_),
  PROTOBUF_FIELD_OFFSET(::QIFI, ping_gap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Account)},
  { 24, -1, sizeof(::Trade)},
  { 41, -1, sizeof(::Order)},
  { 63, -1, sizeof(::Position)},
  { 107, -1, sizeof(::Transfer)},
  { 117, -1, sizeof(::Bank)},
  { 126, 133, sizeof(::QIFI_SettlementEntry_DoNotUse)},
  { 135, 142, sizeof(::QIFI_BanksEntry_DoNotUse)},
  { 144, 151, sizeof(::QIFI_EventEntry_DoNotUse)},
  { 153, 160, sizeof(::QIFI_OrdersEntry_DoNotUse)},
  { 162, 169, sizeof(::QIFI_PositonsEntry_DoNotUse)},
  { 171, 178, sizeof(::QIFI_TradesEntry_DoNotUse)},
  { 180, 187, sizeof(::QIFI_TransfersEntry_DoNotUse)},
  { 189, -1, sizeof(::QIFI)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Bank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_SettlementEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_BanksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_EventEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_OrdersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_PositonsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_TradesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_TransfersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QIFI_default_instance_),
};

const char descriptor_table_protodef_qifi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nqifi.proto\"\217\003\n\007Account\022\017\n\007user_id\030\001 \001("
  "\t\022\020\n\010currency\030\002 \001(\t\022\023\n\013pre_balance\030\003 \001(\002"
  "\022\017\n\007deposit\030\004 \001(\002\022\020\n\010withdraw\030\005 \001(\002\022\025\n\rW"
  "ithdrawQuota\030\006 \001(\002\022\024\n\014close_profit\030\007 \001(\002"
  "\022\022\n\ncommission\030\010 \001(\002\022\017\n\007premium\030\t \001(\002\022\026\n"
  "\016static_balance\030\n \001(\002\022\027\n\017position_profit"
  "\030\013 \001(\002\022\024\n\014float_profit\030\014 \001(\002\022\017\n\007balance\030"
  "\r \001(\002\022\016\n\006margin\030\016 \001(\002\022\025\n\rfrozen_margin\030\017"
  " \001(\002\022\031\n\021frozen_commission\030\020 \001(\002\022\026\n\016froze"
  "n_premium\030\021 \001(\002\022\021\n\tavailable\030\022 \001(\002\022\022\n\nri"
  "sk_ratio\030\023 \001(\002\"\355\001\n\005Trade\022\r\n\005seqno\030\001 \001(\005\022"
  "\017\n\007user_id\030\002 \001(\t\022\020\n\010trade_id\030\003 \001(\t\022\023\n\013ex"
  "change_id\030\004 \001(\t\022\025\n\rinstrument_id\030\005 \001(\t\022\020"
  "\n\010order_id\030\006 \001(\t\022\031\n\021exchange_trade_id\030\007 "
  "\001(\t\022\021\n\tdirection\030\010 \001(\t\022\016\n\006offset\030\t \001(\002\022\016"
  "\n\006volume\030\n \001(\002\022\r\n\005price\030\013 \001(\002\022\027\n\017trade_d"
  "ate_time\030\014 \001(\003\"\345\002\n\005Order\022\r\n\005seqno\030\001 \001(\005\022"
  "\017\n\007user_id\030\002 \001(\t\022\020\n\010order_id\030\003 \001(\t\022\023\n\013ex"
  "change_id\030\004 \001(\t\022\025\n\rinstrument_id\030\005 \001(\t\022\021"
  "\n\tdirection\030\006 \001(\t\022\016\n\006offset\030\007 \001(\t\022\024\n\014vol"
  "ume_orign\030\010 \001(\002\022\022\n\nprice_type\030\t \001(\t\022\023\n\013l"
  "imit_price\030\n \001(\002\022\026\n\016time_condition\030\013 \001(\t"
  "\022\030\n\020volume_condition\030\014 \001(\t\022\030\n\020insert_dat"
  "e_time\030\r \001(\003\022\031\n\021exchange_order_id\030\016 \001(\t\022"
  "\016\n\006status\030\017 \001(\t\022\023\n\013volume_left\030\020 \001(\002\022\020\n\010"
  "last_msg\030\021 \001(\t\"\364\007\n\010Position\022\017\n\007user_id\030\001"
  " \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022\025\n\rinstrument_"
  "id\030\003 \001(\t\022\031\n\021volume_long_today\030\004 \001(\002\022\027\n\017v"
  "olume_long_his\030\005 \001(\002\022\023\n\013volume_long\030\006 \001("
  "\002\022 \n\030volume_long_frozen_today\030\007 \001(\002\022\036\n\026v"
  "olume_long_frozen_his\030\010 \001(\002\022\032\n\022volume_lo"
  "ng_frozen\030\t \001(\002\022\032\n\022volume_short_today\030\n "
  "\001(\002\022\030\n\020volume_short_his\030\013 \001(\002\022\024\n\014volume_"
  "short\030\014 \001(\002\022!\n\031volume_short_frozen_today"
  "\030\r \001(\002\022\037\n\027volume_short_frozen_his\030\016 \001(\002\022"
  "\033\n\023volume_short_frozen\030\017 \001(\002\022\026\n\016volume_l"
  "ong_yd\030\020 \001(\002\022\027\n\017volume_short_yd\030\021 \001(\002\022\024\n"
  "\014pos_long_his\030\022 \001(\002\022\026\n\016pos_long_today\030\023 "
  "\001(\002\022\025\n\rpos_short_his\030\024 \001(\002\022\027\n\017pos_short_"
  "today\030\025 \001(\002\022\027\n\017open_price_long\030\026 \001(\002\022\030\n\020"
  "open_price_short\030\027 \001(\002\022\026\n\016open_cost_long"
  "\030\030 \001(\002\022\027\n\017open_cost_short\030\031 \001(\002\022\033\n\023posit"
  "ion_price_long\030\032 \001(\002\022\034\n\024position_price_s"
  "hort\030\033 \001(\002\022\032\n\022position_cost_long\030\034 \001(\002\022\033"
  "\n\023position_cost_short\030\035 \001(\002\022\022\n\nlast_pric"
  "e\030\036 \001(\002\022\031\n\021float_profit_long\030\037 \001(\002\022\032\n\022fl"
  "oat_profit_short\030  \001(\002\022\024\n\014float_profit\030!"
  " \001(\002\022\034\n\024position_profit_long\030\" \001(\002\022\035\n\025po"
  "sition_profit_short\030# \001(\002\022\027\n\017position_pr"
  "ofit\030$ \001(\002\022\023\n\013margin_long\030% \001(\002\022\024\n\014margi"
  "n_short\030& \001(\002\022\016\n\006margin\030\' \001(\002\"c\n\010Transfe"
  "r\022\020\n\010datetime\030\001 \001(\003\022\020\n\010currency\030\002 \001(\t\022\016\n"
  "\006amount\030\003 \001(\002\022\020\n\010error_id\030\004 \001(\005\022\021\n\terror"
  "_msg\030\005 \001(\t\"L\n\004Bank\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
  " \001(\t\022\024\n\014bank_account\030\003 \001(\t\022\024\n\014fetch_amou"
  "nt\030\004 \001(\002\"\221\010\n\004QIFI\022\022\n\ndatabaseip\030\001 \001(\t\022\026\n"
  "\016account_cookie\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022"
  "\021\n\tportfolio\030\004 \001(\t\022\023\n\013broker_name\030\005 \001(\t\022"
  "\030\n\020capital_password\030\006 \001(\t\022\025\n\rbank_passwo"
  "rd\030\007 \001(\t\022\016\n\006bankid\030\010 \001(\t\022\025\n\rinvestor_nam"
  "e\030\t \001(\t\022\r\n\005money\030\n \001(\002\022\020\n\010pub_host\030\013 \001(\t"
  "\022)\n\nsettlement\030\014 \003(\0132\025.QIFI.SettlementEn"
  "try\022\016\n\006taskid\030\r \001(\t\022\022\n\ntrade_host\030\016 \001(\t\022"
  "\022\n\nupdatetime\030\017 \001(\t\022\r\n\005wsuri\030\020 \001(\t\022\020\n\010ba"
  "nkname\030\021 \001(\t\022\023\n\013trading_day\030\022 \001(\t\022\016\n\006sta"
  "tus\030\023 \001(\005\022\032\n\010accounts\030\024 \001(\0132\010.Account\022\037\n"
  "\005banks\030\025 \003(\0132\020.QIFI.BanksEntry\022\037\n\005event\030"
  "\026 \003(\0132\020.QIFI.EventEntry\022!\n\006orders\030\027 \003(\0132"
  "\021.QIFI.OrdersEntry\022%\n\010positons\030\030 \003(\0132\023.Q"
  "IFI.PositonsEntry\022!\n\006trades\030\031 \003(\0132\021.QIFI"
  ".TradesEntry\022\'\n\ttransfers\030\032 \003(\0132\024.QIFI.T"
  "ransfersEntry\022\020\n\010ping_gap\030\033 \001(\005\0321\n\017Settl"
  "ementEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\0323\n\nBanksEntry\022\013\n\003key\030\001 \001(\t\022\024\n\005value\030\002"
  " \001(\0132\005.Bank:\0028\001\032,\n\nEventEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\013OrdersEntry\022\013\n\003"
  "key\030\001 \001(\t\022\025\n\005value\030\002 \001(\0132\006.Order:\0028\001\032:\n\r"
  "PositonsEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001("
  "\0132\t.Position:\0028\001\0325\n\013TradesEntry\022\013\n\003key\030\001"
  " \001(\t\022\025\n\005value\030\002 \001(\0132\006.Trade:\0028\001\032;\n\016Trans"
  "fersEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t."
  "Transfer:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qifi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_qifi_2eproto_sccs[14] = {
  &scc_info_Account_qifi_2eproto.base,
  &scc_info_Bank_qifi_2eproto.base,
  &scc_info_Order_qifi_2eproto.base,
  &scc_info_Position_qifi_2eproto.base,
  &scc_info_QIFI_qifi_2eproto.base,
  &scc_info_QIFI_BanksEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_EventEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_OrdersEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_PositonsEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_SettlementEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_TradesEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_QIFI_TransfersEntry_DoNotUse_qifi_2eproto.base,
  &scc_info_Trade_qifi_2eproto.base,
  &scc_info_Transfer_qifi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qifi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qifi_2eproto = {
  false, false, descriptor_table_protodef_qifi_2eproto, "qifi.proto", 3260,
  &descriptor_table_qifi_2eproto_once, descriptor_table_qifi_2eproto_sccs, descriptor_table_qifi_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_qifi_2eproto::offsets,
  file_level_metadata_qifi_2eproto, 14, file_level_enum_descriptors_qifi_2eproto, file_level_service_descriptors_qifi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qifi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_qifi_2eproto)), true);

// ===================================================================

void Account::InitAsDefaultInstance() {
}
class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currency(),
      GetArena());
  }
  ::memcpy(&pre_balance_, &from.pre_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&risk_ratio_) -
    reinterpret_cast<char*>(&pre_balance_)) + sizeof(risk_ratio_));
  // @@protoc_insertion_point(copy_constructor:Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_qifi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pre_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&risk_ratio_) -
      reinterpret_cast<char*>(&pre_balance_)) + sizeof(risk_ratio_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_qifi_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pre_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&risk_ratio_) -
      reinterpret_cast<char*>(&pre_balance_)) + sizeof(risk_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Account.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Account.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pre_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pre_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float deposit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          deposit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float withdraw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float WithdrawQuota = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          withdrawquota_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float close_profit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          close_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float commission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float premium = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          premium_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float static_balance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          static_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_profit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          position_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float float_profit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          float_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float balance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float margin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float frozen_margin = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          frozen_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float frozen_commission = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          frozen_commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float frozen_premium = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          frozen_premium_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float available = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float risk_ratio = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          risk_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Account.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Account.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // float pre_balance = 3;
  if (!(this->pre_balance() <= 0 && this->pre_balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pre_balance(), target);
  }

  // float deposit = 4;
  if (!(this->deposit() <= 0 && this->deposit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_deposit(), target);
  }

  // float withdraw = 5;
  if (!(this->withdraw() <= 0 && this->withdraw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_withdraw(), target);
  }

  // float WithdrawQuota = 6;
  if (!(this->withdrawquota() <= 0 && this->withdrawquota() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_withdrawquota(), target);
  }

  // float close_profit = 7;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_close_profit(), target);
  }

  // float commission = 8;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_commission(), target);
  }

  // float premium = 9;
  if (!(this->premium() <= 0 && this->premium() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_premium(), target);
  }

  // float static_balance = 10;
  if (!(this->static_balance() <= 0 && this->static_balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_static_balance(), target);
  }

  // float position_profit = 11;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_position_profit(), target);
  }

  // float float_profit = 12;
  if (!(this->float_profit() <= 0 && this->float_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_float_profit(), target);
  }

  // float balance = 13;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_balance(), target);
  }

  // float margin = 14;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_margin(), target);
  }

  // float frozen_margin = 15;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_frozen_margin(), target);
  }

  // float frozen_commission = 16;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_frozen_commission(), target);
  }

  // float frozen_premium = 17;
  if (!(this->frozen_premium() <= 0 && this->frozen_premium() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_frozen_premium(), target);
  }

  // float available = 18;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_available(), target);
  }

  // float risk_ratio = 19;
  if (!(this->risk_ratio() <= 0 && this->risk_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_risk_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // float pre_balance = 3;
  if (!(this->pre_balance() <= 0 && this->pre_balance() >= 0)) {
    total_size += 1 + 4;
  }

  // float deposit = 4;
  if (!(this->deposit() <= 0 && this->deposit() >= 0)) {
    total_size += 1 + 4;
  }

  // float withdraw = 5;
  if (!(this->withdraw() <= 0 && this->withdraw() >= 0)) {
    total_size += 1 + 4;
  }

  // float WithdrawQuota = 6;
  if (!(this->withdrawquota() <= 0 && this->withdrawquota() >= 0)) {
    total_size += 1 + 4;
  }

  // float close_profit = 7;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    total_size += 1 + 4;
  }

  // float commission = 8;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    total_size += 1 + 4;
  }

  // float premium = 9;
  if (!(this->premium() <= 0 && this->premium() >= 0)) {
    total_size += 1 + 4;
  }

  // float static_balance = 10;
  if (!(this->static_balance() <= 0 && this->static_balance() >= 0)) {
    total_size += 1 + 4;
  }

  // float position_profit = 11;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    total_size += 1 + 4;
  }

  // float float_profit = 12;
  if (!(this->float_profit() <= 0 && this->float_profit() >= 0)) {
    total_size += 1 + 4;
  }

  // float balance = 13;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    total_size += 1 + 4;
  }

  // float margin = 14;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 1 + 4;
  }

  // float frozen_margin = 15;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    total_size += 1 + 4;
  }

  // float frozen_commission = 16;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    total_size += 2 + 4;
  }

  // float frozen_premium = 17;
  if (!(this->frozen_premium() <= 0 && this->frozen_premium() >= 0)) {
    total_size += 2 + 4;
  }

  // float available = 18;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    total_size += 2 + 4;
  }

  // float risk_ratio = 19;
  if (!(this->risk_ratio() <= 0 && this->risk_ratio() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.currency().size() > 0) {
    _internal_set_currency(from._internal_currency());
  }
  if (!(from.pre_balance() <= 0 && from.pre_balance() >= 0)) {
    _internal_set_pre_balance(from._internal_pre_balance());
  }
  if (!(from.deposit() <= 0 && from.deposit() >= 0)) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (!(from.withdraw() <= 0 && from.withdraw() >= 0)) {
    _internal_set_withdraw(from._internal_withdraw());
  }
  if (!(from.withdrawquota() <= 0 && from.withdrawquota() >= 0)) {
    _internal_set_withdrawquota(from._internal_withdrawquota());
  }
  if (!(from.close_profit() <= 0 && from.close_profit() >= 0)) {
    _internal_set_close_profit(from._internal_close_profit());
  }
  if (!(from.commission() <= 0 && from.commission() >= 0)) {
    _internal_set_commission(from._internal_commission());
  }
  if (!(from.premium() <= 0 && from.premium() >= 0)) {
    _internal_set_premium(from._internal_premium());
  }
  if (!(from.static_balance() <= 0 && from.static_balance() >= 0)) {
    _internal_set_static_balance(from._internal_static_balance());
  }
  if (!(from.position_profit() <= 0 && from.position_profit() >= 0)) {
    _internal_set_position_profit(from._internal_position_profit());
  }
  if (!(from.float_profit() <= 0 && from.float_profit() >= 0)) {
    _internal_set_float_profit(from._internal_float_profit());
  }
  if (!(from.balance() <= 0 && from.balance() >= 0)) {
    _internal_set_balance(from._internal_balance());
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    _internal_set_margin(from._internal_margin());
  }
  if (!(from.frozen_margin() <= 0 && from.frozen_margin() >= 0)) {
    _internal_set_frozen_margin(from._internal_frozen_margin());
  }
  if (!(from.frozen_commission() <= 0 && from.frozen_commission() >= 0)) {
    _internal_set_frozen_commission(from._internal_frozen_commission());
  }
  if (!(from.frozen_premium() <= 0 && from.frozen_premium() >= 0)) {
    _internal_set_frozen_premium(from._internal_frozen_premium());
  }
  if (!(from.available() <= 0 && from.available() >= 0)) {
    _internal_set_available(from._internal_available());
  }
  if (!(from.risk_ratio() <= 0 && from.risk_ratio() >= 0)) {
    _internal_set_risk_ratio(from._internal_risk_ratio());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, risk_ratio_)
      + sizeof(Account::risk_ratio_)
      - PROTOBUF_FIELD_OFFSET(Account, pre_balance_)>(
          reinterpret_cast<char*>(&pre_balance_),
          reinterpret_cast<char*>(&other->pre_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trade::InitAsDefaultInstance() {
}
class Trade::_Internal {
 public:
};

Trade::Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Trade)
}
Trade::Trade(const Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trade_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_id(),
      GetArena());
  }
  exchange_trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_trade_id().empty()) {
    exchange_trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_trade_id(),
      GetArena());
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_direction().empty()) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_direction(),
      GetArena());
  }
  ::memcpy(&seqno_, &from.seqno_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_date_time_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(trade_date_time_));
  // @@protoc_insertion_point(copy_constructor:Trade)
}

void Trade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trade_qifi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_trade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_date_time_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(trade_date_time_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_trade_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trade::ArenaDtor(void* object) {
  Trade* _this = reinterpret_cast< Trade* >(object);
  (void)_this;
}
void Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trade_qifi_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trade_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_trade_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trade_date_time_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(trade_date_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seqno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trade_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.trade_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_trade_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_exchange_trade_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.exchange_trade_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Trade.direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 trade_date_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          trade_date_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seqno = 1;
  if (this->seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seqno(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string trade_id = 3;
  if (this->trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.trade_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trade_id(), target);
  }

  // string exchange_id = 4;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.exchange_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange_id(), target);
  }

  // string instrument_id = 5;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.instrument_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_id(), target);
  }

  // string order_id = 6;
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.order_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_order_id(), target);
  }

  // string exchange_trade_id = 7;
  if (this->exchange_trade_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_trade_id().data(), static_cast<int>(this->_internal_exchange_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.exchange_trade_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_exchange_trade_id(), target);
  }

  // string direction = 8;
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Trade.direction");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_direction(), target);
  }

  // float offset = 9;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_offset(), target);
  }

  // float volume = 10;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_volume(), target);
  }

  // float price = 11;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_price(), target);
  }

  // int64 trade_date_time = 12;
  if (this->trade_date_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_trade_date_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string trade_id = 3;
  if (this->trade_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // string exchange_id = 4;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string instrument_id = 5;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string order_id = 6;
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string exchange_trade_id = 7;
  if (this->exchange_trade_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_trade_id());
  }

  // string direction = 8;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // int32 seqno = 1;
  if (this->seqno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seqno());
  }

  // float offset = 9;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 10;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float price = 11;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 trade_date_time = 12;
  if (this->trade_date_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trade_date_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.trade_id().size() > 0) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.exchange_trade_id().size() > 0) {
    _internal_set_exchange_trade_id(from._internal_exchange_trade_id());
  }
  if (from.direction().size() > 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.trade_date_time() != 0) {
    _internal_set_trade_date_time(from._internal_trade_date_time());
  }
}

void Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trade_id_.Swap(&other->trade_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_trade_id_.Swap(&other->exchange_trade_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trade, trade_date_time_)
      + sizeof(Trade::trade_date_time_)
      - PROTOBUF_FIELD_OFFSET(Trade, seqno_)>(
          reinterpret_cast<char*>(&seqno_),
          reinterpret_cast<char*>(&other->seqno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Order::InitAsDefaultInstance() {
}
class Order::_Internal {
 public:
};

Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_direction().empty()) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_direction(),
      GetArena());
  }
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offset().empty()) {
    offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset(),
      GetArena());
  }
  price_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price_type().empty()) {
    price_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_price_type(),
      GetArena());
  }
  time_condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_condition().empty()) {
    time_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time_condition(),
      GetArena());
  }
  volume_condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume_condition().empty()) {
    volume_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_volume_condition(),
      GetArena());
  }
  exchange_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_order_id().empty()) {
    exchange_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_order_id(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  last_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_msg().empty()) {
    last_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_msg(),
      GetArena());
  }
  ::memcpy(&seqno_, &from.seqno_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_left_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(volume_left_));
  // @@protoc_insertion_point(copy_constructor:Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_qifi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_condition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_left_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(volume_left_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_condition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_condition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_qifi_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  price_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_condition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_condition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_left_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(volume_left_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seqno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.offset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float volume_orign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          volume_orign_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string price_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_price_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.price_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float limit_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string time_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_time_condition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.time_condition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume_condition = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_volume_condition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.volume_condition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 insert_date_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          insert_date_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_order_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_exchange_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.exchange_order_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float volume_left = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          volume_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string last_msg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_last_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Order.last_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seqno = 1;
  if (this->seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seqno(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string order_id = 3;
  if (this->order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.order_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_id(), target);
  }

  // string exchange_id = 4;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.exchange_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange_id(), target);
  }

  // string instrument_id = 5;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.instrument_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_id(), target);
  }

  // string direction = 6;
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.direction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_direction(), target);
  }

  // string offset = 7;
  if (this->offset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset().data(), static_cast<int>(this->_internal_offset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.offset");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_offset(), target);
  }

  // float volume_orign = 8;
  if (!(this->volume_orign() <= 0 && this->volume_orign() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_volume_orign(), target);
  }

  // string price_type = 9;
  if (this->price_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price_type().data(), static_cast<int>(this->_internal_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.price_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_price_type(), target);
  }

  // float limit_price = 10;
  if (!(this->limit_price() <= 0 && this->limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_limit_price(), target);
  }

  // string time_condition = 11;
  if (this->time_condition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_condition().data(), static_cast<int>(this->_internal_time_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.time_condition");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_time_condition(), target);
  }

  // string volume_condition = 12;
  if (this->volume_condition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume_condition().data(), static_cast<int>(this->_internal_volume_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.volume_condition");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_volume_condition(), target);
  }

  // int64 insert_date_time = 13;
  if (this->insert_date_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_insert_date_time(), target);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_order_id().data(), static_cast<int>(this->_internal_exchange_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.exchange_order_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_exchange_order_id(), target);
  }

  // string status = 15;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.status");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_status(), target);
  }

  // float volume_left = 16;
  if (!(this->volume_left() <= 0 && this->volume_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_volume_left(), target);
  }

  // string last_msg = 17;
  if (this->last_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_msg().data(), static_cast<int>(this->_internal_last_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Order.last_msg");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_last_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string order_id = 3;
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string exchange_id = 4;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string instrument_id = 5;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string direction = 6;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string offset = 7;
  if (this->offset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset());
  }

  // string price_type = 9;
  if (this->price_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price_type());
  }

  // string time_condition = 11;
  if (this->time_condition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_condition());
  }

  // string volume_condition = 12;
  if (this->volume_condition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume_condition());
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_order_id());
  }

  // string status = 15;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string last_msg = 17;
  if (this->last_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_msg());
  }

  // int32 seqno = 1;
  if (this->seqno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seqno());
  }

  // float volume_orign = 8;
  if (!(this->volume_orign() <= 0 && this->volume_orign() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 insert_date_time = 13;
  if (this->insert_date_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_insert_date_time());
  }

  // float limit_price = 10;
  if (!(this->limit_price() <= 0 && this->limit_price() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_left = 16;
  if (!(this->volume_left() <= 0 && this->volume_left() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.order_id().size() > 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.direction().size() > 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.offset().size() > 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.price_type().size() > 0) {
    _internal_set_price_type(from._internal_price_type());
  }
  if (from.time_condition().size() > 0) {
    _internal_set_time_condition(from._internal_time_condition());
  }
  if (from.volume_condition().size() > 0) {
    _internal_set_volume_condition(from._internal_volume_condition());
  }
  if (from.exchange_order_id().size() > 0) {
    _internal_set_exchange_order_id(from._internal_exchange_order_id());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.last_msg().size() > 0) {
    _internal_set_last_msg(from._internal_last_msg());
  }
  if (from.seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  if (!(from.volume_orign() <= 0 && from.volume_orign() >= 0)) {
    _internal_set_volume_orign(from._internal_volume_orign());
  }
  if (from.insert_date_time() != 0) {
    _internal_set_insert_date_time(from._internal_insert_date_time());
  }
  if (!(from.limit_price() <= 0 && from.limit_price() >= 0)) {
    _internal_set_limit_price(from._internal_limit_price());
  }
  if (!(from.volume_left() <= 0 && from.volume_left() >= 0)) {
    _internal_set_volume_left(from._internal_volume_left());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_id_.Swap(&other->order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_.Swap(&other->offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  price_type_.Swap(&other->price_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_condition_.Swap(&other->time_condition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_condition_.Swap(&other->volume_condition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_msg_.Swap(&other->last_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, volume_left_)
      + sizeof(Order::volume_left_)
      - PROTOBUF_FIELD_OFFSET(Order, seqno_)>(
          reinterpret_cast<char*>(&seqno_),
          reinterpret_cast<char*>(&other->seqno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  ::memcpy(&volume_long_today_, &from.volume_long_today_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&volume_long_today_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_qifi_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_long_today_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&volume_long_today_)) + sizeof(margin_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_qifi_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&volume_long_today_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&volume_long_today_)) + sizeof(margin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Position.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Position.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Position.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float volume_long_today = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          volume_long_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long_his = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          volume_long_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          volume_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long_frozen_today = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          volume_long_frozen_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long_frozen_his = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          volume_long_frozen_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long_frozen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          volume_long_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_today = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          volume_short_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_his = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          volume_short_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          volume_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_frozen_today = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          volume_short_frozen_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_frozen_his = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          volume_short_frozen_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_frozen = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          volume_short_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_long_yd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          volume_long_yd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume_short_yd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          volume_short_yd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_long_his = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          pos_long_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_long_today = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          pos_long_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_short_his = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          pos_short_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_short_today = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          pos_short_today_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float open_price_long = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          open_price_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float open_price_short = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          open_price_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float open_cost_long = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          open_cost_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float open_cost_short = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          open_cost_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_price_long = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          position_price_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_price_short = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          position_price_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_cost_long = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          position_cost_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_cost_short = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          position_cost_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float last_price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float float_profit_long = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          float_profit_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float float_profit_short = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          float_profit_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float float_profit = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          float_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_profit_long = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          position_profit_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_profit_short = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          position_profit_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float position_profit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          position_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float margin_long = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          margin_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float margin_short = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          margin_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float margin = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Position.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Position.exchange_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange_id(), target);
  }

  // string instrument_id = 3;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Position.instrument_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_id(), target);
  }

  // float volume_long_today = 4;
  if (!(this->volume_long_today() <= 0 && this->volume_long_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_volume_long_today(), target);
  }

  // float volume_long_his = 5;
  if (!(this->volume_long_his() <= 0 && this->volume_long_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_volume_long_his(), target);
  }

  // float volume_long = 6;
  if (!(this->volume_long() <= 0 && this->volume_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_volume_long(), target);
  }

  // float volume_long_frozen_today = 7;
  if (!(this->volume_long_frozen_today() <= 0 && this->volume_long_frozen_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_volume_long_frozen_today(), target);
  }

  // float volume_long_frozen_his = 8;
  if (!(this->volume_long_frozen_his() <= 0 && this->volume_long_frozen_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_volume_long_frozen_his(), target);
  }

  // float volume_long_frozen = 9;
  if (!(this->volume_long_frozen() <= 0 && this->volume_long_frozen() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_volume_long_frozen(), target);
  }

  // float volume_short_today = 10;
  if (!(this->volume_short_today() <= 0 && this->volume_short_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_volume_short_today(), target);
  }

  // float volume_short_his = 11;
  if (!(this->volume_short_his() <= 0 && this->volume_short_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_volume_short_his(), target);
  }

  // float volume_short = 12;
  if (!(this->volume_short() <= 0 && this->volume_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_volume_short(), target);
  }

  // float volume_short_frozen_today = 13;
  if (!(this->volume_short_frozen_today() <= 0 && this->volume_short_frozen_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_volume_short_frozen_today(), target);
  }

  // float volume_short_frozen_his = 14;
  if (!(this->volume_short_frozen_his() <= 0 && this->volume_short_frozen_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_volume_short_frozen_his(), target);
  }

  // float volume_short_frozen = 15;
  if (!(this->volume_short_frozen() <= 0 && this->volume_short_frozen() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_volume_short_frozen(), target);
  }

  // float volume_long_yd = 16;
  if (!(this->volume_long_yd() <= 0 && this->volume_long_yd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_volume_long_yd(), target);
  }

  // float volume_short_yd = 17;
  if (!(this->volume_short_yd() <= 0 && this->volume_short_yd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_volume_short_yd(), target);
  }

  // float pos_long_his = 18;
  if (!(this->pos_long_his() <= 0 && this->pos_long_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_pos_long_his(), target);
  }

  // float pos_long_today = 19;
  if (!(this->pos_long_today() <= 0 && this->pos_long_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_pos_long_today(), target);
  }

  // float pos_short_his = 20;
  if (!(this->pos_short_his() <= 0 && this->pos_short_his() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_pos_short_his(), target);
  }

  // float pos_short_today = 21;
  if (!(this->pos_short_today() <= 0 && this->pos_short_today() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_pos_short_today(), target);
  }

  // float open_price_long = 22;
  if (!(this->open_price_long() <= 0 && this->open_price_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_open_price_long(), target);
  }

  // float open_price_short = 23;
  if (!(this->open_price_short() <= 0 && this->open_price_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_open_price_short(), target);
  }

  // float open_cost_long = 24;
  if (!(this->open_cost_long() <= 0 && this->open_cost_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_open_cost_long(), target);
  }

  // float open_cost_short = 25;
  if (!(this->open_cost_short() <= 0 && this->open_cost_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_open_cost_short(), target);
  }

  // float position_price_long = 26;
  if (!(this->position_price_long() <= 0 && this->position_price_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_position_price_long(), target);
  }

  // float position_price_short = 27;
  if (!(this->position_price_short() <= 0 && this->position_price_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_position_price_short(), target);
  }

  // float position_cost_long = 28;
  if (!(this->position_cost_long() <= 0 && this->position_cost_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_position_cost_long(), target);
  }

  // float position_cost_short = 29;
  if (!(this->position_cost_short() <= 0 && this->position_cost_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_position_cost_short(), target);
  }

  // float last_price = 30;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_last_price(), target);
  }

  // float float_profit_long = 31;
  if (!(this->float_profit_long() <= 0 && this->float_profit_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_float_profit_long(), target);
  }

  // float float_profit_short = 32;
  if (!(this->float_profit_short() <= 0 && this->float_profit_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_float_profit_short(), target);
  }

  // float float_profit = 33;
  if (!(this->float_profit() <= 0 && this->float_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_float_profit(), target);
  }

  // float position_profit_long = 34;
  if (!(this->position_profit_long() <= 0 && this->position_profit_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_position_profit_long(), target);
  }

  // float position_profit_short = 35;
  if (!(this->position_profit_short() <= 0 && this->position_profit_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_position_profit_short(), target);
  }

  // float position_profit = 36;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_position_profit(), target);
  }

  // float margin_long = 37;
  if (!(this->margin_long() <= 0 && this->margin_long() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_margin_long(), target);
  }

  // float margin_short = 38;
  if (!(this->margin_short() <= 0 && this->margin_short() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_margin_short(), target);
  }

  // float margin = 39;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_margin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string instrument_id = 3;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // float volume_long_today = 4;
  if (!(this->volume_long_today() <= 0 && this->volume_long_today() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long_his = 5;
  if (!(this->volume_long_his() <= 0 && this->volume_long_his() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long = 6;
  if (!(this->volume_long() <= 0 && this->volume_long() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long_frozen_today = 7;
  if (!(this->volume_long_frozen_today() <= 0 && this->volume_long_frozen_today() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long_frozen_his = 8;
  if (!(this->volume_long_frozen_his() <= 0 && this->volume_long_frozen_his() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long_frozen = 9;
  if (!(this->volume_long_frozen() <= 0 && this->volume_long_frozen() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short_today = 10;
  if (!(this->volume_short_today() <= 0 && this->volume_short_today() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short_his = 11;
  if (!(this->volume_short_his() <= 0 && this->volume_short_his() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short = 12;
  if (!(this->volume_short() <= 0 && this->volume_short() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short_frozen_today = 13;
  if (!(this->volume_short_frozen_today() <= 0 && this->volume_short_frozen_today() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short_frozen_his = 14;
  if (!(this->volume_short_frozen_his() <= 0 && this->volume_short_frozen_his() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_short_frozen = 15;
  if (!(this->volume_short_frozen() <= 0 && this->volume_short_frozen() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume_long_yd = 16;
  if (!(this->volume_long_yd() <= 0 && this->volume_long_yd() >= 0)) {
    total_size += 2 + 4;
  }

  // float volume_short_yd = 17;
  if (!(this->volume_short_yd() <= 0 && this->volume_short_yd() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_long_his = 18;
  if (!(this->pos_long_his() <= 0 && this->pos_long_his() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_long_today = 19;
  if (!(this->pos_long_today() <= 0 && this->pos_long_today() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_short_his = 20;
  if (!(this->pos_short_his() <= 0 && this->pos_short_his() >= 0)) {
    total_size += 2 + 4;
  }

  // float pos_short_today = 21;
  if (!(this->pos_short_today() <= 0 && this->pos_short_today() >= 0)) {
    total_size += 2 + 4;
  }

  // float open_price_long = 22;
  if (!(this->open_price_long() <= 0 && this->open_price_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float open_price_short = 23;
  if (!(this->open_price_short() <= 0 && this->open_price_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float open_cost_long = 24;
  if (!(this->open_cost_long() <= 0 && this->open_cost_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float open_cost_short = 25;
  if (!(this->open_cost_short() <= 0 && this->open_cost_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_price_long = 26;
  if (!(this->position_price_long() <= 0 && this->position_price_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_price_short = 27;
  if (!(this->position_price_short() <= 0 && this->position_price_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_cost_long = 28;
  if (!(this->position_cost_long() <= 0 && this->position_cost_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_cost_short = 29;
  if (!(this->position_cost_short() <= 0 && this->position_cost_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float last_price = 30;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    total_size += 2 + 4;
  }

  // float float_profit_long = 31;
  if (!(this->float_profit_long() <= 0 && this->float_profit_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float float_profit_short = 32;
  if (!(this->float_profit_short() <= 0 && this->float_profit_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float float_profit = 33;
  if (!(this->float_profit() <= 0 && this->float_profit() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_profit_long = 34;
  if (!(this->position_profit_long() <= 0 && this->position_profit_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_profit_short = 35;
  if (!(this->position_profit_short() <= 0 && this->position_profit_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float position_profit = 36;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    total_size += 2 + 4;
  }

  // float margin_long = 37;
  if (!(this->margin_long() <= 0 && this->margin_long() >= 0)) {
    total_size += 2 + 4;
  }

  // float margin_short = 38;
  if (!(this->margin_short() <= 0 && this->margin_short() >= 0)) {
    total_size += 2 + 4;
  }

  // float margin = 39;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!(from.volume_long_today() <= 0 && from.volume_long_today() >= 0)) {
    _internal_set_volume_long_today(from._internal_volume_long_today());
  }
  if (!(from.volume_long_his() <= 0 && from.volume_long_his() >= 0)) {
    _internal_set_volume_long_his(from._internal_volume_long_his());
  }
  if (!(from.volume_long() <= 0 && from.volume_long() >= 0)) {
    _internal_set_volume_long(from._internal_volume_long());
  }
  if (!(from.volume_long_frozen_today() <= 0 && from.volume_long_frozen_today() >= 0)) {
    _internal_set_volume_long_frozen_today(from._internal_volume_long_frozen_today());
  }
  if (!(from.volume_long_frozen_his() <= 0 && from.volume_long_frozen_his() >= 0)) {
    _internal_set_volume_long_frozen_his(from._internal_volume_long_frozen_his());
  }
  if (!(from.volume_long_frozen() <= 0 && from.volume_long_frozen() >= 0)) {
    _internal_set_volume_long_frozen(from._internal_volume_long_frozen());
  }
  if (!(from.volume_short_today() <= 0 && from.volume_short_today() >= 0)) {
    _internal_set_volume_short_today(from._internal_volume_short_today());
  }
  if (!(from.volume_short_his() <= 0 && from.volume_short_his() >= 0)) {
    _internal_set_volume_short_his(from._internal_volume_short_his());
  }
  if (!(from.volume_short() <= 0 && from.volume_short() >= 0)) {
    _internal_set_volume_short(from._internal_volume_short());
  }
  if (!(from.volume_short_frozen_today() <= 0 && from.volume_short_frozen_today() >= 0)) {
    _internal_set_volume_short_frozen_today(from._internal_volume_short_frozen_today());
  }
  if (!(from.volume_short_frozen_his() <= 0 && from.volume_short_frozen_his() >= 0)) {
    _internal_set_volume_short_frozen_his(from._internal_volume_short_frozen_his());
  }
  if (!(from.volume_short_frozen() <= 0 && from.volume_short_frozen() >= 0)) {
    _internal_set_volume_short_frozen(from._internal_volume_short_frozen());
  }
  if (!(from.volume_long_yd() <= 0 && from.volume_long_yd() >= 0)) {
    _internal_set_volume_long_yd(from._internal_volume_long_yd());
  }
  if (!(from.volume_short_yd() <= 0 && from.volume_short_yd() >= 0)) {
    _internal_set_volume_short_yd(from._internal_volume_short_yd());
  }
  if (!(from.pos_long_his() <= 0 && from.pos_long_his() >= 0)) {
    _internal_set_pos_long_his(from._internal_pos_long_his());
  }
  if (!(from.pos_long_today() <= 0 && from.pos_long_today() >= 0)) {
    _internal_set_pos_long_today(from._internal_pos_long_today());
  }
  if (!(from.pos_short_his() <= 0 && from.pos_short_his() >= 0)) {
    _internal_set_pos_short_his(from._internal_pos_short_his());
  }
  if (!(from.pos_short_today() <= 0 && from.pos_short_today() >= 0)) {
    _internal_set_pos_short_today(from._internal_pos_short_today());
  }
  if (!(from.open_price_long() <= 0 && from.open_price_long() >= 0)) {
    _internal_set_open_price_long(from._internal_open_price_long());
  }
  if (!(from.open_price_short() <= 0 && from.open_price_short() >= 0)) {
    _internal_set_open_price_short(from._internal_open_price_short());
  }
  if (!(from.open_cost_long() <= 0 && from.open_cost_long() >= 0)) {
    _internal_set_open_cost_long(from._internal_open_cost_long());
  }
  if (!(from.open_cost_short() <= 0 && from.open_cost_short() >= 0)) {
    _internal_set_open_cost_short(from._internal_open_cost_short());
  }
  if (!(from.position_price_long() <= 0 && from.position_price_long() >= 0)) {
    _internal_set_position_price_long(from._internal_position_price_long());
  }
  if (!(from.position_price_short() <= 0 && from.position_price_short() >= 0)) {
    _internal_set_position_price_short(from._internal_position_price_short());
  }
  if (!(from.position_cost_long() <= 0 && from.position_cost_long() >= 0)) {
    _internal_set_position_cost_long(from._internal_position_cost_long());
  }
  if (!(from.position_cost_short() <= 0 && from.position_cost_short() >= 0)) {
    _internal_set_position_cost_short(from._internal_position_cost_short());
  }
  if (!(from.last_price() <= 0 && from.last_price() >= 0)) {
    _internal_set_last_price(from._internal_last_price());
  }
  if (!(from.float_profit_long() <= 0 && from.float_profit_long() >= 0)) {
    _internal_set_float_profit_long(from._internal_float_profit_long());
  }
  if (!(from.float_profit_short() <= 0 && from.float_profit_short() >= 0)) {
    _internal_set_float_profit_short(from._internal_float_profit_short());
  }
  if (!(from.float_profit() <= 0 && from.float_profit() >= 0)) {
    _internal_set_float_profit(from._internal_float_profit());
  }
  if (!(from.position_profit_long() <= 0 && from.position_profit_long() >= 0)) {
    _internal_set_position_profit_long(from._internal_position_profit_long());
  }
  if (!(from.position_profit_short() <= 0 && from.position_profit_short() >= 0)) {
    _internal_set_position_profit_short(from._internal_position_profit_short());
  }
  if (!(from.position_profit() <= 0 && from.position_profit() >= 0)) {
    _internal_set_position_profit(from._internal_position_profit());
  }
  if (!(from.margin_long() <= 0 && from.margin_long() >= 0)) {
    _internal_set_margin_long(from._internal_margin_long());
  }
  if (!(from.margin_short() <= 0 && from.margin_short() >= 0)) {
    _internal_set_margin_short(from._internal_margin_short());
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    _internal_set_margin(from._internal_margin());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, margin_)
      + sizeof(Position::margin_)
      - PROTOBUF_FIELD_OFFSET(Position, volume_long_today_)>(
          reinterpret_cast<char*>(&volume_long_today_),
          reinterpret_cast<char*>(&other->volume_long_today_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transfer::InitAsDefaultInstance() {
}
class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currency(),
      GetArena());
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_msg(),
      GetArena());
  }
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_id_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(error_id_));
  // @@protoc_insertion_point(copy_constructor:Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_qifi_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_id_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(error_id_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_qifi_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_id_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(error_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 datetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Transfer.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 error_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          error_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Transfer.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 datetime = 1;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_datetime(), target);
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Transfer.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // float amount = 3;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_amount(), target);
  }

  // int32 error_id = 4;
  if (this->error_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_error_id(), target);
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Transfer.error_msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int64 datetime = 1;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_datetime());
  }

  // float amount = 3;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 error_id = 4;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {
    _internal_set_currency(from._internal_currency());
  }
  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.error_id() != 0) {
    _internal_set_error_id(from._internal_error_id());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, error_id_)
      + sizeof(Transfer::error_id_)
      - PROTOBUF_FIELD_OFFSET(Transfer, datetime_)>(
          reinterpret_cast<char*>(&datetime_),
          reinterpret_cast<char*>(&other->datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Bank::InitAsDefaultInstance() {
}
class Bank::_Internal {
 public:
};

Bank::Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Bank)
}
Bank::Bank(const Bank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  bank_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_account().empty()) {
    bank_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bank_account(),
      GetArena());
  }
  fetch_amount_ = from.fetch_amount_;
  // @@protoc_insertion_point(copy_constructor:Bank)
}

void Bank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bank_qifi_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fetch_amount_ = 0;
}

Bank::~Bank() {
  // @@protoc_insertion_point(destructor:Bank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bank::ArenaDtor(void* object) {
  Bank* _this = reinterpret_cast< Bank* >(object);
  (void)_this;
}
void Bank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bank& Bank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bank_qifi_2eproto.base);
  return *internal_default_instance();
}


void Bank::Clear() {
// @@protoc_insertion_point(message_clear_start:Bank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fetch_amount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Bank.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Bank.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bank_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Bank.bank_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fetch_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fetch_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Bank.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Bank.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string bank_account = 3;
  if (this->bank_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_account().data(), static_cast<int>(this->_internal_bank_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Bank.bank_account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bank_account(), target);
  }

  // float fetch_amount = 4;
  if (!(this->fetch_amount() <= 0 && this->fetch_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fetch_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bank)
  return target;
}

size_t Bank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string bank_account = 3;
  if (this->bank_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_account());
  }

  // float fetch_amount = 4;
  if (!(this->fetch_amount() <= 0 && this->fetch_amount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Bank)
  GOOGLE_DCHECK_NE(&from, this);
  const Bank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Bank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Bank)
    MergeFrom(*source);
  }
}

void Bank::MergeFrom(const Bank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Bank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.bank_account().size() > 0) {
    _internal_set_bank_account(from._internal_bank_account());
  }
  if (!(from.fetch_amount() <= 0 && from.fetch_amount() >= 0)) {
    _internal_set_fetch_amount(from._internal_fetch_amount());
  }
}

void Bank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Bank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bank::CopyFrom(const Bank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bank::IsInitialized() const {
  return true;
}

void Bank::InternalSwap(Bank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_account_.Swap(&other->bank_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(fetch_amount_, other->fetch_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QIFI_SettlementEntry_DoNotUse::QIFI_SettlementEntry_DoNotUse() {}
QIFI_SettlementEntry_DoNotUse::QIFI_SettlementEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_SettlementEntry_DoNotUse::MergeFrom(const QIFI_SettlementEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_SettlementEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_SettlementEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_BanksEntry_DoNotUse::QIFI_BanksEntry_DoNotUse() {}
QIFI_BanksEntry_DoNotUse::QIFI_BanksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_BanksEntry_DoNotUse::MergeFrom(const QIFI_BanksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_BanksEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_BanksEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_EventEntry_DoNotUse::QIFI_EventEntry_DoNotUse() {}
QIFI_EventEntry_DoNotUse::QIFI_EventEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_EventEntry_DoNotUse::MergeFrom(const QIFI_EventEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_EventEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_EventEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_OrdersEntry_DoNotUse::QIFI_OrdersEntry_DoNotUse() {}
QIFI_OrdersEntry_DoNotUse::QIFI_OrdersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_OrdersEntry_DoNotUse::MergeFrom(const QIFI_OrdersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_OrdersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_OrdersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_PositonsEntry_DoNotUse::QIFI_PositonsEntry_DoNotUse() {}
QIFI_PositonsEntry_DoNotUse::QIFI_PositonsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_PositonsEntry_DoNotUse::MergeFrom(const QIFI_PositonsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_PositonsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_PositonsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_TradesEntry_DoNotUse::QIFI_TradesEntry_DoNotUse() {}
QIFI_TradesEntry_DoNotUse::QIFI_TradesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_TradesEntry_DoNotUse::MergeFrom(const QIFI_TradesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_TradesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_TradesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

QIFI_TransfersEntry_DoNotUse::QIFI_TransfersEntry_DoNotUse() {}
QIFI_TransfersEntry_DoNotUse::QIFI_TransfersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QIFI_TransfersEntry_DoNotUse::MergeFrom(const QIFI_TransfersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QIFI_TransfersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QIFI_TransfersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void QIFI::InitAsDefaultInstance() {
  ::_QIFI_default_instance_._instance.get_mutable()->accounts_ = const_cast< ::Account*>(
      ::Account::internal_default_instance());
}
class QIFI::_Internal {
 public:
  static const ::Account& accounts(const QIFI* msg);
};

const ::Account&
QIFI::_Internal::accounts(const QIFI* msg) {
  return *msg->accounts_;
}
QIFI::QIFI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settlement_(arena),
  banks_(arena),
  event_(arena),
  orders_(arena),
  positons_(arena),
  trades_(arena),
  transfers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:QIFI)
}
QIFI::QIFI(const QIFI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settlement_.MergeFrom(from.settlement_);
  banks_.MergeFrom(from.banks_);
  event_.MergeFrom(from.event_);
  orders_.MergeFrom(from.orders_);
  positons_.MergeFrom(from.positons_);
  trades_.MergeFrom(from.trades_);
  transfers_.MergeFrom(from.transfers_);
  databaseip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_databaseip().empty()) {
    databaseip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_databaseip(),
      GetArena());
  }
  account_cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_cookie().empty()) {
    account_cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account_cookie(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  portfolio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_portfolio().empty()) {
    portfolio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_portfolio(),
      GetArena());
  }
  broker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_name().empty()) {
    broker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broker_name(),
      GetArena());
  }
  capital_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_capital_password().empty()) {
    capital_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_capital_password(),
      GetArena());
  }
  bank_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bank_password().empty()) {
    bank_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bank_password(),
      GetArena());
  }
  bankid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bankid().empty()) {
    bankid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bankid(),
      GetArena());
  }
  investor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_investor_name().empty()) {
    investor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_investor_name(),
      GetArena());
  }
  pub_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_host().empty()) {
    pub_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pub_host(),
      GetArena());
  }
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskid().empty()) {
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_taskid(),
      GetArena());
  }
  trade_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trade_host().empty()) {
    trade_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trade_host(),
      GetArena());
  }
  updatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updatetime().empty()) {
    updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updatetime(),
      GetArena());
  }
  wsuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wsuri().empty()) {
    wsuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wsuri(),
      GetArena());
  }
  bankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bankname().empty()) {
    bankname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bankname(),
      GetArena());
  }
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  if (from._internal_has_accounts()) {
    accounts_ = new ::Account(*from.accounts_);
  } else {
    accounts_ = nullptr;
  }
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_gap_) -
    reinterpret_cast<char*>(&money_)) + sizeof(ping_gap_));
  // @@protoc_insertion_point(copy_constructor:QIFI)
}

void QIFI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QIFI_qifi_2eproto.base);
  databaseip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portfolio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capital_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bankid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wsuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bankname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accounts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_gap_) -
      reinterpret_cast<char*>(&accounts_)) + sizeof(ping_gap_));
}

QIFI::~QIFI() {
  // @@protoc_insertion_point(destructor:QIFI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QIFI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  databaseip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_cookie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portfolio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capital_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bank_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bankid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wsuri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bankname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accounts_;
}

void QIFI::ArenaDtor(void* object) {
  QIFI* _this = reinterpret_cast< QIFI* >(object);
  (void)_this;
}
void QIFI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QIFI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QIFI& QIFI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QIFI_qifi_2eproto.base);
  return *internal_default_instance();
}


void QIFI::Clear() {
// @@protoc_insertion_point(message_clear_start:QIFI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settlement_.Clear();
  banks_.Clear();
  event_.Clear();
  orders_.Clear();
  positons_.Clear();
  trades_.Clear();
  transfers_.Clear();
  databaseip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_cookie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  portfolio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  capital_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bankid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pub_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trade_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wsuri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bankname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_gap_) -
      reinterpret_cast<char*>(&money_)) + sizeof(ping_gap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QIFI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string databaseip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_databaseip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.databaseip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_cookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_cookie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.account_cookie"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string portfolio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_portfolio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.portfolio"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broker_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_broker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.broker_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string capital_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_capital_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.capital_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bank_password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bank_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.bank_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bankid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bankid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.bankid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string investor_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_investor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.investor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float money = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string pub_host = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_pub_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.pub_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> settlement = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&settlement_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string taskid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.taskid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trade_host = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_trade_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.trade_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updatetime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_updatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.updatetime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wsuri = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_wsuri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.wsuri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bankname = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_bankname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.bankname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trading_day = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QIFI.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Account accounts = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_accounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Bank> banks = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&banks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> event = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&event_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Order> orders = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&orders_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Position> positons = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&positons_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Trade> trades = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&trades_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .Transfer> transfers = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&transfers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ping_gap = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ping_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QIFI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QIFI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string databaseip = 1;
  if (this->databaseip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_databaseip().data(), static_cast<int>(this->_internal_databaseip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.databaseip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_databaseip(), target);
  }

  // string account_cookie = 2;
  if (this->account_cookie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_cookie().data(), static_cast<int>(this->_internal_account_cookie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.account_cookie");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_cookie(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string portfolio = 4;
  if (this->portfolio().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_portfolio().data(), static_cast<int>(this->_internal_portfolio().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.portfolio");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_portfolio(), target);
  }

  // string broker_name = 5;
  if (this->broker_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_name().data(), static_cast<int>(this->_internal_broker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.broker_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_broker_name(), target);
  }

  // string capital_password = 6;
  if (this->capital_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_capital_password().data(), static_cast<int>(this->_internal_capital_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.capital_password");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_capital_password(), target);
  }

  // string bank_password = 7;
  if (this->bank_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bank_password().data(), static_cast<int>(this->_internal_bank_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.bank_password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bank_password(), target);
  }

  // string bankid = 8;
  if (this->bankid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bankid().data(), static_cast<int>(this->_internal_bankid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.bankid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bankid(), target);
  }

  // string investor_name = 9;
  if (this->investor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_name().data(), static_cast<int>(this->_internal_investor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.investor_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_investor_name(), target);
  }

  // float money = 10;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_money(), target);
  }

  // string pub_host = 11;
  if (this->pub_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_host().data(), static_cast<int>(this->_internal_pub_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.pub_host");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_pub_host(), target);
  }

  // map<string, string> settlement = 12;
  if (!this->_internal_settlement().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.SettlementEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.SettlementEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_settlement().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_settlement().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_settlement().begin();
          it != this->_internal_settlement().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_SettlementEntry_DoNotUse::Funcs::InternalSerialize(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_settlement().begin();
          it != this->_internal_settlement().end(); ++it) {
        target = QIFI_SettlementEntry_DoNotUse::Funcs::InternalSerialize(12, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string taskid = 13;
  if (this->taskid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.taskid");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_taskid(), target);
  }

  // string trade_host = 14;
  if (this->trade_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_host().data(), static_cast<int>(this->_internal_trade_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.trade_host");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_trade_host(), target);
  }

  // string updatetime = 15;
  if (this->updatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updatetime().data(), static_cast<int>(this->_internal_updatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.updatetime");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_updatetime(), target);
  }

  // string wsuri = 16;
  if (this->wsuri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wsuri().data(), static_cast<int>(this->_internal_wsuri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.wsuri");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_wsuri(), target);
  }

  // string bankname = 17;
  if (this->bankname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bankname().data(), static_cast<int>(this->_internal_bankname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.bankname");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_bankname(), target);
  }

  // string trading_day = 18;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QIFI.trading_day");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_trading_day(), target);
  }

  // int32 status = 19;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_status(), target);
  }

  // .Account accounts = 20;
  if (this->has_accounts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::accounts(this), target, stream);
  }

  // map<string, .Bank> banks = 21;
  if (!this->_internal_banks().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.BanksEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_banks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_banks().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >::const_iterator
          it = this->_internal_banks().begin();
          it != this->_internal_banks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_BanksEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >::const_iterator
          it = this->_internal_banks().begin();
          it != this->_internal_banks().end(); ++it) {
        target = QIFI_BanksEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> event = 22;
  if (!this->_internal_event().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.EventEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.EventEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_event().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_event().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_event().begin();
          it != this->_internal_event().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_EventEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_event().begin();
          it != this->_internal_event().end(); ++it) {
        target = QIFI_EventEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Order> orders = 23;
  if (!this->_internal_orders().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.OrdersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_orders().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_orders().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >::const_iterator
          it = this->_internal_orders().begin();
          it != this->_internal_orders().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_OrdersEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >::const_iterator
          it = this->_internal_orders().begin();
          it != this->_internal_orders().end(); ++it) {
        target = QIFI_OrdersEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Position> positons = 24;
  if (!this->_internal_positons().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.PositonsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_positons().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_positons().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >::const_iterator
          it = this->_internal_positons().begin();
          it != this->_internal_positons().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_PositonsEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >::const_iterator
          it = this->_internal_positons().begin();
          it != this->_internal_positons().end(); ++it) {
        target = QIFI_PositonsEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Trade> trades = 25;
  if (!this->_internal_trades().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.TradesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_trades().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_trades().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >::const_iterator
          it = this->_internal_trades().begin();
          it != this->_internal_trades().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_TradesEntry_DoNotUse::Funcs::InternalSerialize(25, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >::const_iterator
          it = this->_internal_trades().begin();
          it != this->_internal_trades().end(); ++it) {
        target = QIFI_TradesEntry_DoNotUse::Funcs::InternalSerialize(25, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Transfer> transfers = 26;
  if (!this->_internal_transfers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "QIFI.TransfersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_transfers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_transfers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >::const_iterator
          it = this->_internal_transfers().begin();
          it != this->_internal_transfers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QIFI_TransfersEntry_DoNotUse::Funcs::InternalSerialize(26, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >::const_iterator
          it = this->_internal_transfers().begin();
          it != this->_internal_transfers().end(); ++it) {
        target = QIFI_TransfersEntry_DoNotUse::Funcs::InternalSerialize(26, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 ping_gap = 27;
  if (this->ping_gap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_ping_gap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QIFI)
  return target;
}

size_t QIFI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QIFI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> settlement = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settlement_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_settlement().begin();
      it != this->_internal_settlement().end(); ++it) {
    total_size += QIFI_SettlementEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Bank> banks = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_banks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >::const_iterator
      it = this->_internal_banks().begin();
      it != this->_internal_banks().end(); ++it) {
    total_size += QIFI_BanksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> event = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_event().begin();
      it != this->_internal_event().end(); ++it) {
    total_size += QIFI_EventEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Order> orders = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_orders_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >::const_iterator
      it = this->_internal_orders().begin();
      it != this->_internal_orders().end(); ++it) {
    total_size += QIFI_OrdersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Position> positons = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_positons_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >::const_iterator
      it = this->_internal_positons().begin();
      it != this->_internal_positons().end(); ++it) {
    total_size += QIFI_PositonsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Trade> trades = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trades_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >::const_iterator
      it = this->_internal_trades().begin();
      it != this->_internal_trades().end(); ++it) {
    total_size += QIFI_TradesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Transfer> transfers = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_transfers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >::const_iterator
      it = this->_internal_transfers().begin();
      it != this->_internal_transfers().end(); ++it) {
    total_size += QIFI_TransfersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string databaseip = 1;
  if (this->databaseip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_databaseip());
  }

  // string account_cookie = 2;
  if (this->account_cookie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_cookie());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string portfolio = 4;
  if (this->portfolio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_portfolio());
  }

  // string broker_name = 5;
  if (this->broker_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_name());
  }

  // string capital_password = 6;
  if (this->capital_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capital_password());
  }

  // string bank_password = 7;
  if (this->bank_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bank_password());
  }

  // string bankid = 8;
  if (this->bankid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bankid());
  }

  // string investor_name = 9;
  if (this->investor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_name());
  }

  // string pub_host = 11;
  if (this->pub_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_host());
  }

  // string taskid = 13;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string trade_host = 14;
  if (this->trade_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_host());
  }

  // string updatetime = 15;
  if (this->updatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatetime());
  }

  // string wsuri = 16;
  if (this->wsuri().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wsuri());
  }

  // string bankname = 17;
  if (this->bankname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bankname());
  }

  // string trading_day = 18;
  if (this->trading_day().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // .Account accounts = 20;
  if (this->has_accounts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accounts_);
  }

  // float money = 10;
  if (!(this->money() <= 0 && this->money() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 status = 19;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 ping_gap = 27;
  if (this->ping_gap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ping_gap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QIFI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QIFI)
  GOOGLE_DCHECK_NE(&from, this);
  const QIFI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QIFI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QIFI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QIFI)
    MergeFrom(*source);
  }
}

void QIFI::MergeFrom(const QIFI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QIFI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settlement_.MergeFrom(from.settlement_);
  banks_.MergeFrom(from.banks_);
  event_.MergeFrom(from.event_);
  orders_.MergeFrom(from.orders_);
  positons_.MergeFrom(from.positons_);
  trades_.MergeFrom(from.trades_);
  transfers_.MergeFrom(from.transfers_);
  if (from.databaseip().size() > 0) {
    _internal_set_databaseip(from._internal_databaseip());
  }
  if (from.account_cookie().size() > 0) {
    _internal_set_account_cookie(from._internal_account_cookie());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.portfolio().size() > 0) {
    _internal_set_portfolio(from._internal_portfolio());
  }
  if (from.broker_name().size() > 0) {
    _internal_set_broker_name(from._internal_broker_name());
  }
  if (from.capital_password().size() > 0) {
    _internal_set_capital_password(from._internal_capital_password());
  }
  if (from.bank_password().size() > 0) {
    _internal_set_bank_password(from._internal_bank_password());
  }
  if (from.bankid().size() > 0) {
    _internal_set_bankid(from._internal_bankid());
  }
  if (from.investor_name().size() > 0) {
    _internal_set_investor_name(from._internal_investor_name());
  }
  if (from.pub_host().size() > 0) {
    _internal_set_pub_host(from._internal_pub_host());
  }
  if (from.taskid().size() > 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.trade_host().size() > 0) {
    _internal_set_trade_host(from._internal_trade_host());
  }
  if (from.updatetime().size() > 0) {
    _internal_set_updatetime(from._internal_updatetime());
  }
  if (from.wsuri().size() > 0) {
    _internal_set_wsuri(from._internal_wsuri());
  }
  if (from.bankname().size() > 0) {
    _internal_set_bankname(from._internal_bankname());
  }
  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.has_accounts()) {
    _internal_mutable_accounts()->::Account::MergeFrom(from._internal_accounts());
  }
  if (!(from.money() <= 0 && from.money() >= 0)) {
    _internal_set_money(from._internal_money());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.ping_gap() != 0) {
    _internal_set_ping_gap(from._internal_ping_gap());
  }
}

void QIFI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QIFI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QIFI::CopyFrom(const QIFI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QIFI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QIFI::IsInitialized() const {
  return true;
}

void QIFI::InternalSwap(QIFI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settlement_.Swap(&other->settlement_);
  banks_.Swap(&other->banks_);
  event_.Swap(&other->event_);
  orders_.Swap(&other->orders_);
  positons_.Swap(&other->positons_);
  trades_.Swap(&other->trades_);
  transfers_.Swap(&other->transfers_);
  databaseip_.Swap(&other->databaseip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_cookie_.Swap(&other->account_cookie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  portfolio_.Swap(&other->portfolio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_name_.Swap(&other->broker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  capital_password_.Swap(&other->capital_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bank_password_.Swap(&other->bank_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bankid_.Swap(&other->bankid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_name_.Swap(&other->investor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pub_host_.Swap(&other->pub_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trade_host_.Swap(&other->trade_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatetime_.Swap(&other->updatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wsuri_.Swap(&other->wsuri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bankname_.Swap(&other->bankname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QIFI, ping_gap_)
      + sizeof(QIFI::ping_gap_)
      - PROTOBUF_FIELD_OFFSET(QIFI, accounts_)>(
          reinterpret_cast<char*>(&accounts_),
          reinterpret_cast<char*>(&other->accounts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QIFI::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Account* Arena::CreateMaybeMessage< ::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::Trade* Arena::CreateMaybeMessage< ::Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::Order* Arena::CreateMaybeMessage< ::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::Position* Arena::CreateMaybeMessage< ::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::Transfer* Arena::CreateMaybeMessage< ::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::Bank* Arena::CreateMaybeMessage< ::Bank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bank >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_SettlementEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_SettlementEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_SettlementEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_BanksEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_BanksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_BanksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_EventEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_EventEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_EventEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_OrdersEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_OrdersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_OrdersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_PositonsEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_PositonsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_PositonsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_TradesEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_TradesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_TradesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI_TransfersEntry_DoNotUse* Arena::CreateMaybeMessage< ::QIFI_TransfersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI_TransfersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::QIFI* Arena::CreateMaybeMessage< ::QIFI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QIFI >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
