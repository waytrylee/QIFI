// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qifi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_qifi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_qifi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_qifi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_qifi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qifi_2eproto;
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Bank;
class BankDefaultTypeInternal;
extern BankDefaultTypeInternal _Bank_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class QIFI;
class QIFIDefaultTypeInternal;
extern QIFIDefaultTypeInternal _QIFI_default_instance_;
class QIFI_BanksEntry_DoNotUse;
class QIFI_BanksEntry_DoNotUseDefaultTypeInternal;
extern QIFI_BanksEntry_DoNotUseDefaultTypeInternal _QIFI_BanksEntry_DoNotUse_default_instance_;
class QIFI_EventEntry_DoNotUse;
class QIFI_EventEntry_DoNotUseDefaultTypeInternal;
extern QIFI_EventEntry_DoNotUseDefaultTypeInternal _QIFI_EventEntry_DoNotUse_default_instance_;
class QIFI_OrdersEntry_DoNotUse;
class QIFI_OrdersEntry_DoNotUseDefaultTypeInternal;
extern QIFI_OrdersEntry_DoNotUseDefaultTypeInternal _QIFI_OrdersEntry_DoNotUse_default_instance_;
class QIFI_PositonsEntry_DoNotUse;
class QIFI_PositonsEntry_DoNotUseDefaultTypeInternal;
extern QIFI_PositonsEntry_DoNotUseDefaultTypeInternal _QIFI_PositonsEntry_DoNotUse_default_instance_;
class QIFI_SettlementEntry_DoNotUse;
class QIFI_SettlementEntry_DoNotUseDefaultTypeInternal;
extern QIFI_SettlementEntry_DoNotUseDefaultTypeInternal _QIFI_SettlementEntry_DoNotUse_default_instance_;
class QIFI_TradesEntry_DoNotUse;
class QIFI_TradesEntry_DoNotUseDefaultTypeInternal;
extern QIFI_TradesEntry_DoNotUseDefaultTypeInternal _QIFI_TradesEntry_DoNotUse_default_instance_;
class QIFI_TransfersEntry_DoNotUse;
class QIFI_TransfersEntry_DoNotUseDefaultTypeInternal;
extern QIFI_TransfersEntry_DoNotUseDefaultTypeInternal _QIFI_TransfersEntry_DoNotUse_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Account* Arena::CreateMaybeMessage<::Account>(Arena*);
template<> ::Bank* Arena::CreateMaybeMessage<::Bank>(Arena*);
template<> ::Order* Arena::CreateMaybeMessage<::Order>(Arena*);
template<> ::Position* Arena::CreateMaybeMessage<::Position>(Arena*);
template<> ::QIFI* Arena::CreateMaybeMessage<::QIFI>(Arena*);
template<> ::QIFI_BanksEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_BanksEntry_DoNotUse>(Arena*);
template<> ::QIFI_EventEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_EventEntry_DoNotUse>(Arena*);
template<> ::QIFI_OrdersEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_OrdersEntry_DoNotUse>(Arena*);
template<> ::QIFI_PositonsEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_PositonsEntry_DoNotUse>(Arena*);
template<> ::QIFI_SettlementEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_SettlementEntry_DoNotUse>(Arena*);
template<> ::QIFI_TradesEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_TradesEntry_DoNotUse>(Arena*);
template<> ::QIFI_TransfersEntry_DoNotUse* Arena::CreateMaybeMessage<::QIFI_TransfersEntry_DoNotUse>(Arena*);
template<> ::Trade* Arena::CreateMaybeMessage<::Trade>(Arena*);
template<> ::Transfer* Arena::CreateMaybeMessage<::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Account) */ {
 public:
  inline Account() : Account(nullptr) {};
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCurrencyFieldNumber = 2,
    kPreBalanceFieldNumber = 3,
    kDepositFieldNumber = 4,
    kWithdrawFieldNumber = 5,
    kWithdrawQuotaFieldNumber = 6,
    kCloseProfitFieldNumber = 7,
    kCommissionFieldNumber = 8,
    kPremiumFieldNumber = 9,
    kStaticBalanceFieldNumber = 10,
    kPositionProfitFieldNumber = 11,
    kFloatProfitFieldNumber = 12,
    kBalanceFieldNumber = 13,
    kMarginFieldNumber = 14,
    kFrozenMarginFieldNumber = 15,
    kFrozenCommissionFieldNumber = 16,
    kFrozenPremiumFieldNumber = 17,
    kAvailableFieldNumber = 18,
    kRiskRatioFieldNumber = 19,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currency();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currency(
      std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // float pre_balance = 3;
  void clear_pre_balance();
  float pre_balance() const;
  void set_pre_balance(float value);
  private:
  float _internal_pre_balance() const;
  void _internal_set_pre_balance(float value);
  public:

  // float deposit = 4;
  void clear_deposit();
  float deposit() const;
  void set_deposit(float value);
  private:
  float _internal_deposit() const;
  void _internal_set_deposit(float value);
  public:

  // float withdraw = 5;
  void clear_withdraw();
  float withdraw() const;
  void set_withdraw(float value);
  private:
  float _internal_withdraw() const;
  void _internal_set_withdraw(float value);
  public:

  // float WithdrawQuota = 6;
  void clear_withdrawquota();
  float withdrawquota() const;
  void set_withdrawquota(float value);
  private:
  float _internal_withdrawquota() const;
  void _internal_set_withdrawquota(float value);
  public:

  // float close_profit = 7;
  void clear_close_profit();
  float close_profit() const;
  void set_close_profit(float value);
  private:
  float _internal_close_profit() const;
  void _internal_set_close_profit(float value);
  public:

  // float commission = 8;
  void clear_commission();
  float commission() const;
  void set_commission(float value);
  private:
  float _internal_commission() const;
  void _internal_set_commission(float value);
  public:

  // float premium = 9;
  void clear_premium();
  float premium() const;
  void set_premium(float value);
  private:
  float _internal_premium() const;
  void _internal_set_premium(float value);
  public:

  // float static_balance = 10;
  void clear_static_balance();
  float static_balance() const;
  void set_static_balance(float value);
  private:
  float _internal_static_balance() const;
  void _internal_set_static_balance(float value);
  public:

  // float position_profit = 11;
  void clear_position_profit();
  float position_profit() const;
  void set_position_profit(float value);
  private:
  float _internal_position_profit() const;
  void _internal_set_position_profit(float value);
  public:

  // float float_profit = 12;
  void clear_float_profit();
  float float_profit() const;
  void set_float_profit(float value);
  private:
  float _internal_float_profit() const;
  void _internal_set_float_profit(float value);
  public:

  // float balance = 13;
  void clear_balance();
  float balance() const;
  void set_balance(float value);
  private:
  float _internal_balance() const;
  void _internal_set_balance(float value);
  public:

  // float margin = 14;
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // float frozen_margin = 15;
  void clear_frozen_margin();
  float frozen_margin() const;
  void set_frozen_margin(float value);
  private:
  float _internal_frozen_margin() const;
  void _internal_set_frozen_margin(float value);
  public:

  // float frozen_commission = 16;
  void clear_frozen_commission();
  float frozen_commission() const;
  void set_frozen_commission(float value);
  private:
  float _internal_frozen_commission() const;
  void _internal_set_frozen_commission(float value);
  public:

  // float frozen_premium = 17;
  void clear_frozen_premium();
  float frozen_premium() const;
  void set_frozen_premium(float value);
  private:
  float _internal_frozen_premium() const;
  void _internal_set_frozen_premium(float value);
  public:

  // float available = 18;
  void clear_available();
  float available() const;
  void set_available(float value);
  private:
  float _internal_available() const;
  void _internal_set_available(float value);
  public:

  // float risk_ratio = 19;
  void clear_risk_ratio();
  float risk_ratio() const;
  void set_risk_ratio(float value);
  private:
  float _internal_risk_ratio() const;
  void _internal_set_risk_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  float pre_balance_;
  float deposit_;
  float withdraw_;
  float withdrawquota_;
  float close_profit_;
  float commission_;
  float premium_;
  float static_balance_;
  float position_profit_;
  float float_profit_;
  float balance_;
  float margin_;
  float frozen_margin_;
  float frozen_commission_;
  float frozen_premium_;
  float available_;
  float risk_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {};
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trade";
  }
  protected:
  explicit Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kTradeIdFieldNumber = 3,
    kExchangeIdFieldNumber = 4,
    kInstrumentIdFieldNumber = 5,
    kOrderIdFieldNumber = 6,
    kExchangeTradeIdFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kSeqnoFieldNumber = 1,
    kOffsetFieldNumber = 9,
    kVolumeFieldNumber = 10,
    kPriceFieldNumber = 11,
    kTradeDateTimeFieldNumber = 12,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string trade_id = 3;
  void clear_trade_id();
  const std::string& trade_id() const;
  void set_trade_id(const std::string& value);
  void set_trade_id(std::string&& value);
  void set_trade_id(const char* value);
  void set_trade_id(const char* value, size_t size);
  std::string* mutable_trade_id();
  std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trade_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trade_id(
      std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string exchange_id = 4;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_id = 5;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string order_id = 6;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_id(
      std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string exchange_trade_id = 7;
  void clear_exchange_trade_id();
  const std::string& exchange_trade_id() const;
  void set_exchange_trade_id(const std::string& value);
  void set_exchange_trade_id(std::string&& value);
  void set_exchange_trade_id(const char* value);
  void set_exchange_trade_id(const char* value, size_t size);
  std::string* mutable_exchange_trade_id();
  std::string* release_exchange_trade_id();
  void set_allocated_exchange_trade_id(std::string* exchange_trade_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_trade_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_trade_id(
      std::string* exchange_trade_id);
  private:
  const std::string& _internal_exchange_trade_id() const;
  void _internal_set_exchange_trade_id(const std::string& value);
  std::string* _internal_mutable_exchange_trade_id();
  public:

  // string direction = 8;
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_direction(
      std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // int32 seqno = 1;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::int32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seqno() const;
  void _internal_set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float offset = 9;
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // float volume = 10;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // float price = 11;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // int64 trade_date_time = 12;
  void clear_trade_date_time();
  ::PROTOBUF_NAMESPACE_ID::int64 trade_date_time() const;
  void set_trade_date_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trade_date_time() const;
  void _internal_set_trade_date_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 seqno_;
  float offset_;
  float volume_;
  float price_;
  ::PROTOBUF_NAMESPACE_ID::int64 trade_date_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Order) */ {
 public:
  inline Order() : Order(nullptr) {};
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kOrderIdFieldNumber = 3,
    kExchangeIdFieldNumber = 4,
    kInstrumentIdFieldNumber = 5,
    kDirectionFieldNumber = 6,
    kOffsetFieldNumber = 7,
    kPriceTypeFieldNumber = 9,
    kTimeConditionFieldNumber = 11,
    kVolumeConditionFieldNumber = 12,
    kExchangeOrderIdFieldNumber = 14,
    kStatusFieldNumber = 15,
    kLastMsgFieldNumber = 17,
    kSeqnoFieldNumber = 1,
    kVolumeOrignFieldNumber = 8,
    kInsertDateTimeFieldNumber = 13,
    kLimitPriceFieldNumber = 10,
    kVolumeLeftFieldNumber = 16,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string order_id = 3;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_id(
      std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string exchange_id = 4;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_id = 5;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string direction = 6;
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_direction(
      std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string offset = 7;
  void clear_offset();
  const std::string& offset() const;
  void set_offset(const std::string& value);
  void set_offset(std::string&& value);
  void set_offset(const char* value);
  void set_offset(const char* value, size_t size);
  std::string* mutable_offset();
  std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_offset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_offset(
      std::string* offset);
  private:
  const std::string& _internal_offset() const;
  void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // string price_type = 9;
  void clear_price_type();
  const std::string& price_type() const;
  void set_price_type(const std::string& value);
  void set_price_type(std::string&& value);
  void set_price_type(const char* value);
  void set_price_type(const char* value, size_t size);
  std::string* mutable_price_type();
  std::string* release_price_type();
  void set_allocated_price_type(std::string* price_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_price_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_price_type(
      std::string* price_type);
  private:
  const std::string& _internal_price_type() const;
  void _internal_set_price_type(const std::string& value);
  std::string* _internal_mutable_price_type();
  public:

  // string time_condition = 11;
  void clear_time_condition();
  const std::string& time_condition() const;
  void set_time_condition(const std::string& value);
  void set_time_condition(std::string&& value);
  void set_time_condition(const char* value);
  void set_time_condition(const char* value, size_t size);
  std::string* mutable_time_condition();
  std::string* release_time_condition();
  void set_allocated_time_condition(std::string* time_condition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_condition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_condition(
      std::string* time_condition);
  private:
  const std::string& _internal_time_condition() const;
  void _internal_set_time_condition(const std::string& value);
  std::string* _internal_mutable_time_condition();
  public:

  // string volume_condition = 12;
  void clear_volume_condition();
  const std::string& volume_condition() const;
  void set_volume_condition(const std::string& value);
  void set_volume_condition(std::string&& value);
  void set_volume_condition(const char* value);
  void set_volume_condition(const char* value, size_t size);
  std::string* mutable_volume_condition();
  std::string* release_volume_condition();
  void set_allocated_volume_condition(std::string* volume_condition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_volume_condition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_volume_condition(
      std::string* volume_condition);
  private:
  const std::string& _internal_volume_condition() const;
  void _internal_set_volume_condition(const std::string& value);
  std::string* _internal_mutable_volume_condition();
  public:

  // string exchange_order_id = 14;
  void clear_exchange_order_id();
  const std::string& exchange_order_id() const;
  void set_exchange_order_id(const std::string& value);
  void set_exchange_order_id(std::string&& value);
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  std::string* mutable_exchange_order_id();
  std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* exchange_order_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_order_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_order_id(
      std::string* exchange_order_id);
  private:
  const std::string& _internal_exchange_order_id() const;
  void _internal_set_exchange_order_id(const std::string& value);
  std::string* _internal_mutable_exchange_order_id();
  public:

  // string status = 15;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string last_msg = 17;
  void clear_last_msg();
  const std::string& last_msg() const;
  void set_last_msg(const std::string& value);
  void set_last_msg(std::string&& value);
  void set_last_msg(const char* value);
  void set_last_msg(const char* value, size_t size);
  std::string* mutable_last_msg();
  std::string* release_last_msg();
  void set_allocated_last_msg(std::string* last_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_msg(
      std::string* last_msg);
  private:
  const std::string& _internal_last_msg() const;
  void _internal_set_last_msg(const std::string& value);
  std::string* _internal_mutable_last_msg();
  public:

  // int32 seqno = 1;
  void clear_seqno();
  ::PROTOBUF_NAMESPACE_ID::int32 seqno() const;
  void set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seqno() const;
  void _internal_set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float volume_orign = 8;
  void clear_volume_orign();
  float volume_orign() const;
  void set_volume_orign(float value);
  private:
  float _internal_volume_orign() const;
  void _internal_set_volume_orign(float value);
  public:

  // int64 insert_date_time = 13;
  void clear_insert_date_time();
  ::PROTOBUF_NAMESPACE_ID::int64 insert_date_time() const;
  void set_insert_date_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_insert_date_time() const;
  void _internal_set_insert_date_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float limit_price = 10;
  void clear_limit_price();
  float limit_price() const;
  void set_limit_price(float value);
  private:
  float _internal_limit_price() const;
  void _internal_set_limit_price(float value);
  public:

  // float volume_left = 16;
  void clear_volume_left();
  float volume_left() const;
  void set_volume_left(float value);
  private:
  float _internal_volume_left() const;
  void _internal_set_volume_left(float value);
  public:

  // @@protoc_insertion_point(class_scope:Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 seqno_;
  float volume_orign_;
  ::PROTOBUF_NAMESPACE_ID::int64 insert_date_time_;
  float limit_price_;
  float volume_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kInstrumentIdFieldNumber = 3,
    kVolumeLongTodayFieldNumber = 4,
    kVolumeLongHisFieldNumber = 5,
    kVolumeLongFieldNumber = 6,
    kVolumeLongFrozenTodayFieldNumber = 7,
    kVolumeLongFrozenHisFieldNumber = 8,
    kVolumeLongFrozenFieldNumber = 9,
    kVolumeShortTodayFieldNumber = 10,
    kVolumeShortHisFieldNumber = 11,
    kVolumeShortFieldNumber = 12,
    kVolumeShortFrozenTodayFieldNumber = 13,
    kVolumeShortFrozenHisFieldNumber = 14,
    kVolumeShortFrozenFieldNumber = 15,
    kVolumeLongYdFieldNumber = 16,
    kVolumeShortYdFieldNumber = 17,
    kPosLongHisFieldNumber = 18,
    kPosLongTodayFieldNumber = 19,
    kPosShortHisFieldNumber = 20,
    kPosShortTodayFieldNumber = 21,
    kOpenPriceLongFieldNumber = 22,
    kOpenPriceShortFieldNumber = 23,
    kOpenCostLongFieldNumber = 24,
    kOpenCostShortFieldNumber = 25,
    kPositionPriceLongFieldNumber = 26,
    kPositionPriceShortFieldNumber = 27,
    kPositionCostLongFieldNumber = 28,
    kPositionCostShortFieldNumber = 29,
    kLastPriceFieldNumber = 30,
    kFloatProfitLongFieldNumber = 31,
    kFloatProfitShortFieldNumber = 32,
    kFloatProfitFieldNumber = 33,
    kPositionProfitLongFieldNumber = 34,
    kPositionProfitShortFieldNumber = 35,
    kPositionProfitFieldNumber = 36,
    kMarginLongFieldNumber = 37,
    kMarginShortFieldNumber = 38,
    kMarginFieldNumber = 39,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string exchange_id = 2;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_id = 3;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // float volume_long_today = 4;
  void clear_volume_long_today();
  float volume_long_today() const;
  void set_volume_long_today(float value);
  private:
  float _internal_volume_long_today() const;
  void _internal_set_volume_long_today(float value);
  public:

  // float volume_long_his = 5;
  void clear_volume_long_his();
  float volume_long_his() const;
  void set_volume_long_his(float value);
  private:
  float _internal_volume_long_his() const;
  void _internal_set_volume_long_his(float value);
  public:

  // float volume_long = 6;
  void clear_volume_long();
  float volume_long() const;
  void set_volume_long(float value);
  private:
  float _internal_volume_long() const;
  void _internal_set_volume_long(float value);
  public:

  // float volume_long_frozen_today = 7;
  void clear_volume_long_frozen_today();
  float volume_long_frozen_today() const;
  void set_volume_long_frozen_today(float value);
  private:
  float _internal_volume_long_frozen_today() const;
  void _internal_set_volume_long_frozen_today(float value);
  public:

  // float volume_long_frozen_his = 8;
  void clear_volume_long_frozen_his();
  float volume_long_frozen_his() const;
  void set_volume_long_frozen_his(float value);
  private:
  float _internal_volume_long_frozen_his() const;
  void _internal_set_volume_long_frozen_his(float value);
  public:

  // float volume_long_frozen = 9;
  void clear_volume_long_frozen();
  float volume_long_frozen() const;
  void set_volume_long_frozen(float value);
  private:
  float _internal_volume_long_frozen() const;
  void _internal_set_volume_long_frozen(float value);
  public:

  // float volume_short_today = 10;
  void clear_volume_short_today();
  float volume_short_today() const;
  void set_volume_short_today(float value);
  private:
  float _internal_volume_short_today() const;
  void _internal_set_volume_short_today(float value);
  public:

  // float volume_short_his = 11;
  void clear_volume_short_his();
  float volume_short_his() const;
  void set_volume_short_his(float value);
  private:
  float _internal_volume_short_his() const;
  void _internal_set_volume_short_his(float value);
  public:

  // float volume_short = 12;
  void clear_volume_short();
  float volume_short() const;
  void set_volume_short(float value);
  private:
  float _internal_volume_short() const;
  void _internal_set_volume_short(float value);
  public:

  // float volume_short_frozen_today = 13;
  void clear_volume_short_frozen_today();
  float volume_short_frozen_today() const;
  void set_volume_short_frozen_today(float value);
  private:
  float _internal_volume_short_frozen_today() const;
  void _internal_set_volume_short_frozen_today(float value);
  public:

  // float volume_short_frozen_his = 14;
  void clear_volume_short_frozen_his();
  float volume_short_frozen_his() const;
  void set_volume_short_frozen_his(float value);
  private:
  float _internal_volume_short_frozen_his() const;
  void _internal_set_volume_short_frozen_his(float value);
  public:

  // float volume_short_frozen = 15;
  void clear_volume_short_frozen();
  float volume_short_frozen() const;
  void set_volume_short_frozen(float value);
  private:
  float _internal_volume_short_frozen() const;
  void _internal_set_volume_short_frozen(float value);
  public:

  // float volume_long_yd = 16;
  void clear_volume_long_yd();
  float volume_long_yd() const;
  void set_volume_long_yd(float value);
  private:
  float _internal_volume_long_yd() const;
  void _internal_set_volume_long_yd(float value);
  public:

  // float volume_short_yd = 17;
  void clear_volume_short_yd();
  float volume_short_yd() const;
  void set_volume_short_yd(float value);
  private:
  float _internal_volume_short_yd() const;
  void _internal_set_volume_short_yd(float value);
  public:

  // float pos_long_his = 18;
  void clear_pos_long_his();
  float pos_long_his() const;
  void set_pos_long_his(float value);
  private:
  float _internal_pos_long_his() const;
  void _internal_set_pos_long_his(float value);
  public:

  // float pos_long_today = 19;
  void clear_pos_long_today();
  float pos_long_today() const;
  void set_pos_long_today(float value);
  private:
  float _internal_pos_long_today() const;
  void _internal_set_pos_long_today(float value);
  public:

  // float pos_short_his = 20;
  void clear_pos_short_his();
  float pos_short_his() const;
  void set_pos_short_his(float value);
  private:
  float _internal_pos_short_his() const;
  void _internal_set_pos_short_his(float value);
  public:

  // float pos_short_today = 21;
  void clear_pos_short_today();
  float pos_short_today() const;
  void set_pos_short_today(float value);
  private:
  float _internal_pos_short_today() const;
  void _internal_set_pos_short_today(float value);
  public:

  // float open_price_long = 22;
  void clear_open_price_long();
  float open_price_long() const;
  void set_open_price_long(float value);
  private:
  float _internal_open_price_long() const;
  void _internal_set_open_price_long(float value);
  public:

  // float open_price_short = 23;
  void clear_open_price_short();
  float open_price_short() const;
  void set_open_price_short(float value);
  private:
  float _internal_open_price_short() const;
  void _internal_set_open_price_short(float value);
  public:

  // float open_cost_long = 24;
  void clear_open_cost_long();
  float open_cost_long() const;
  void set_open_cost_long(float value);
  private:
  float _internal_open_cost_long() const;
  void _internal_set_open_cost_long(float value);
  public:

  // float open_cost_short = 25;
  void clear_open_cost_short();
  float open_cost_short() const;
  void set_open_cost_short(float value);
  private:
  float _internal_open_cost_short() const;
  void _internal_set_open_cost_short(float value);
  public:

  // float position_price_long = 26;
  void clear_position_price_long();
  float position_price_long() const;
  void set_position_price_long(float value);
  private:
  float _internal_position_price_long() const;
  void _internal_set_position_price_long(float value);
  public:

  // float position_price_short = 27;
  void clear_position_price_short();
  float position_price_short() const;
  void set_position_price_short(float value);
  private:
  float _internal_position_price_short() const;
  void _internal_set_position_price_short(float value);
  public:

  // float position_cost_long = 28;
  void clear_position_cost_long();
  float position_cost_long() const;
  void set_position_cost_long(float value);
  private:
  float _internal_position_cost_long() const;
  void _internal_set_position_cost_long(float value);
  public:

  // float position_cost_short = 29;
  void clear_position_cost_short();
  float position_cost_short() const;
  void set_position_cost_short(float value);
  private:
  float _internal_position_cost_short() const;
  void _internal_set_position_cost_short(float value);
  public:

  // float last_price = 30;
  void clear_last_price();
  float last_price() const;
  void set_last_price(float value);
  private:
  float _internal_last_price() const;
  void _internal_set_last_price(float value);
  public:

  // float float_profit_long = 31;
  void clear_float_profit_long();
  float float_profit_long() const;
  void set_float_profit_long(float value);
  private:
  float _internal_float_profit_long() const;
  void _internal_set_float_profit_long(float value);
  public:

  // float float_profit_short = 32;
  void clear_float_profit_short();
  float float_profit_short() const;
  void set_float_profit_short(float value);
  private:
  float _internal_float_profit_short() const;
  void _internal_set_float_profit_short(float value);
  public:

  // float float_profit = 33;
  void clear_float_profit();
  float float_profit() const;
  void set_float_profit(float value);
  private:
  float _internal_float_profit() const;
  void _internal_set_float_profit(float value);
  public:

  // float position_profit_long = 34;
  void clear_position_profit_long();
  float position_profit_long() const;
  void set_position_profit_long(float value);
  private:
  float _internal_position_profit_long() const;
  void _internal_set_position_profit_long(float value);
  public:

  // float position_profit_short = 35;
  void clear_position_profit_short();
  float position_profit_short() const;
  void set_position_profit_short(float value);
  private:
  float _internal_position_profit_short() const;
  void _internal_set_position_profit_short(float value);
  public:

  // float position_profit = 36;
  void clear_position_profit();
  float position_profit() const;
  void set_position_profit(float value);
  private:
  float _internal_position_profit() const;
  void _internal_set_position_profit(float value);
  public:

  // float margin_long = 37;
  void clear_margin_long();
  float margin_long() const;
  void set_margin_long(float value);
  private:
  float _internal_margin_long() const;
  void _internal_set_margin_long(float value);
  public:

  // float margin_short = 38;
  void clear_margin_short();
  float margin_short() const;
  void set_margin_short(float value);
  private:
  float _internal_margin_short() const;
  void _internal_set_margin_short(float value);
  public:

  // float margin = 39;
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // @@protoc_insertion_point(class_scope:Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  float volume_long_today_;
  float volume_long_his_;
  float volume_long_;
  float volume_long_frozen_today_;
  float volume_long_frozen_his_;
  float volume_long_frozen_;
  float volume_short_today_;
  float volume_short_his_;
  float volume_short_;
  float volume_short_frozen_today_;
  float volume_short_frozen_his_;
  float volume_short_frozen_;
  float volume_long_yd_;
  float volume_short_yd_;
  float pos_long_his_;
  float pos_long_today_;
  float pos_short_his_;
  float pos_short_today_;
  float open_price_long_;
  float open_price_short_;
  float open_cost_long_;
  float open_cost_short_;
  float position_price_long_;
  float position_price_short_;
  float position_cost_long_;
  float position_cost_short_;
  float last_price_;
  float float_profit_long_;
  float float_profit_short_;
  float float_profit_;
  float position_profit_long_;
  float position_profit_short_;
  float position_profit_;
  float margin_long_;
  float margin_short_;
  float margin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {};
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 2,
    kErrorMsgFieldNumber = 5,
    kDatetimeFieldNumber = 1,
    kAmountFieldNumber = 3,
    kErrorIdFieldNumber = 4,
  };
  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currency();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currency(
      std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string error_msg = 5;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_msg(
      std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int64 datetime = 1;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::int64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float amount = 3;
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // int32 error_id = 4;
  void clear_error_id();
  ::PROTOBUF_NAMESPACE_ID::int32 error_id() const;
  void set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_id() const;
  void _internal_set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 datetime_;
  float amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class Bank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Bank) */ {
 public:
  inline Bank() : Bank(nullptr) {};
  virtual ~Bank();

  Bank(const Bank& from);
  Bank(Bank&& from) noexcept
    : Bank() {
    *this = ::std::move(from);
  }

  inline Bank& operator=(const Bank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bank& operator=(Bank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bank* internal_default_instance() {
    return reinterpret_cast<const Bank*>(
               &_Bank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Bank& a, Bank& b) {
    a.Swap(&b);
  }
  inline void Swap(Bank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bank* New() const final {
    return CreateMaybeMessage<Bank>(nullptr);
  }

  Bank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bank& from);
  void MergeFrom(const Bank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bank";
  }
  protected:
  explicit Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kBankAccountFieldNumber = 3,
    kFetchAmountFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bank_account = 3;
  void clear_bank_account();
  const std::string& bank_account() const;
  void set_bank_account(const std::string& value);
  void set_bank_account(std::string&& value);
  void set_bank_account(const char* value);
  void set_bank_account(const char* value, size_t size);
  std::string* mutable_bank_account();
  std::string* release_bank_account();
  void set_allocated_bank_account(std::string* bank_account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bank_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bank_account(
      std::string* bank_account);
  private:
  const std::string& _internal_bank_account() const;
  void _internal_set_bank_account(const std::string& value);
  std::string* _internal_mutable_bank_account();
  public:

  // float fetch_amount = 4;
  void clear_fetch_amount();
  float fetch_amount() const;
  void set_fetch_amount(float value);
  private:
  float _internal_fetch_amount() const;
  void _internal_set_fetch_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:Bank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_account_;
  float fetch_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// -------------------------------------------------------------------

class QIFI_SettlementEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_SettlementEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_SettlementEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QIFI_SettlementEntry_DoNotUse();
  QIFI_SettlementEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_SettlementEntry_DoNotUse& other);
  static const QIFI_SettlementEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_SettlementEntry_DoNotUse*>(&_QIFI_SettlementEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.SettlementEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.SettlementEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_BanksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_BanksEntry_DoNotUse, 
    std::string, ::Bank,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_BanksEntry_DoNotUse, 
    std::string, ::Bank,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QIFI_BanksEntry_DoNotUse();
  QIFI_BanksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_BanksEntry_DoNotUse& other);
  static const QIFI_BanksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_BanksEntry_DoNotUse*>(&_QIFI_BanksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.BanksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_EventEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_EventEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_EventEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QIFI_EventEntry_DoNotUse();
  QIFI_EventEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_EventEntry_DoNotUse& other);
  static const QIFI_EventEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_EventEntry_DoNotUse*>(&_QIFI_EventEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.EventEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.EventEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_OrdersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_OrdersEntry_DoNotUse, 
    std::string, ::Order,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_OrdersEntry_DoNotUse, 
    std::string, ::Order,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QIFI_OrdersEntry_DoNotUse();
  QIFI_OrdersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_OrdersEntry_DoNotUse& other);
  static const QIFI_OrdersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_OrdersEntry_DoNotUse*>(&_QIFI_OrdersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.OrdersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_PositonsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_PositonsEntry_DoNotUse, 
    std::string, ::Position,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_PositonsEntry_DoNotUse, 
    std::string, ::Position,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QIFI_PositonsEntry_DoNotUse();
  QIFI_PositonsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_PositonsEntry_DoNotUse& other);
  static const QIFI_PositonsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_PositonsEntry_DoNotUse*>(&_QIFI_PositonsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.PositonsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_TradesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_TradesEntry_DoNotUse, 
    std::string, ::Trade,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_TradesEntry_DoNotUse, 
    std::string, ::Trade,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QIFI_TradesEntry_DoNotUse();
  QIFI_TradesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_TradesEntry_DoNotUse& other);
  static const QIFI_TradesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_TradesEntry_DoNotUse*>(&_QIFI_TradesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.TradesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI_TransfersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_TransfersEntry_DoNotUse, 
    std::string, ::Transfer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QIFI_TransfersEntry_DoNotUse, 
    std::string, ::Transfer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QIFI_TransfersEntry_DoNotUse();
  QIFI_TransfersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QIFI_TransfersEntry_DoNotUse& other);
  static const QIFI_TransfersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QIFI_TransfersEntry_DoNotUse*>(&_QIFI_TransfersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "QIFI.TransfersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class QIFI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QIFI) */ {
 public:
  inline QIFI() : QIFI(nullptr) {};
  virtual ~QIFI();

  QIFI(const QIFI& from);
  QIFI(QIFI&& from) noexcept
    : QIFI() {
    *this = ::std::move(from);
  }

  inline QIFI& operator=(const QIFI& from) {
    CopyFrom(from);
    return *this;
  }
  inline QIFI& operator=(QIFI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QIFI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QIFI* internal_default_instance() {
    return reinterpret_cast<const QIFI*>(
               &_QIFI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QIFI& a, QIFI& b) {
    a.Swap(&b);
  }
  inline void Swap(QIFI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QIFI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QIFI* New() const final {
    return CreateMaybeMessage<QIFI>(nullptr);
  }

  QIFI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QIFI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QIFI& from);
  void MergeFrom(const QIFI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QIFI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QIFI";
  }
  protected:
  explicit QIFI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qifi_2eproto);
    return ::descriptor_table_qifi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSettlementFieldNumber = 12,
    kBanksFieldNumber = 21,
    kEventFieldNumber = 22,
    kOrdersFieldNumber = 23,
    kPositonsFieldNumber = 24,
    kTradesFieldNumber = 25,
    kTransfersFieldNumber = 26,
    kDatabaseipFieldNumber = 1,
    kAccountCookieFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kPortfolioFieldNumber = 4,
    kBrokerNameFieldNumber = 5,
    kCapitalPasswordFieldNumber = 6,
    kBankPasswordFieldNumber = 7,
    kBankidFieldNumber = 8,
    kInvestorNameFieldNumber = 9,
    kPubHostFieldNumber = 11,
    kTaskidFieldNumber = 13,
    kTradeHostFieldNumber = 14,
    kUpdatetimeFieldNumber = 15,
    kWsuriFieldNumber = 16,
    kBanknameFieldNumber = 17,
    kTradingDayFieldNumber = 18,
    kAccountsFieldNumber = 20,
    kMoneyFieldNumber = 10,
    kStatusFieldNumber = 19,
    kPingGapFieldNumber = 27,
  };
  // map<string, string> settlement = 12;
  int settlement_size() const;
  private:
  int _internal_settlement_size() const;
  public:
  void clear_settlement();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_settlement() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_settlement();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      settlement() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_settlement();

  // map<string, .Bank> banks = 21;
  int banks_size() const;
  private:
  int _internal_banks_size() const;
  public:
  void clear_banks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >&
      _internal_banks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >*
      _internal_mutable_banks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >&
      banks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >*
      mutable_banks();

  // map<string, string> event = 22;
  int event_size() const;
  private:
  int _internal_event_size() const;
  public:
  void clear_event();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_event() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_event();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      event() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_event();

  // map<string, .Order> orders = 23;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >&
      _internal_orders() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >*
      _internal_mutable_orders();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >&
      orders() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >*
      mutable_orders();

  // map<string, .Position> positons = 24;
  int positons_size() const;
  private:
  int _internal_positons_size() const;
  public:
  void clear_positons();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >&
      _internal_positons() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >*
      _internal_mutable_positons();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >&
      positons() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >*
      mutable_positons();

  // map<string, .Trade> trades = 25;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >&
      _internal_trades() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >*
      _internal_mutable_trades();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >&
      trades() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >*
      mutable_trades();

  // map<string, .Transfer> transfers = 26;
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >&
      _internal_transfers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >*
      _internal_mutable_transfers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >&
      transfers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >*
      mutable_transfers();

  // string databaseip = 1;
  void clear_databaseip();
  const std::string& databaseip() const;
  void set_databaseip(const std::string& value);
  void set_databaseip(std::string&& value);
  void set_databaseip(const char* value);
  void set_databaseip(const char* value, size_t size);
  std::string* mutable_databaseip();
  std::string* release_databaseip();
  void set_allocated_databaseip(std::string* databaseip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_databaseip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_databaseip(
      std::string* databaseip);
  private:
  const std::string& _internal_databaseip() const;
  void _internal_set_databaseip(const std::string& value);
  std::string* _internal_mutable_databaseip();
  public:

  // string account_cookie = 2;
  void clear_account_cookie();
  const std::string& account_cookie() const;
  void set_account_cookie(const std::string& value);
  void set_account_cookie(std::string&& value);
  void set_account_cookie(const char* value);
  void set_account_cookie(const char* value, size_t size);
  std::string* mutable_account_cookie();
  std::string* release_account_cookie();
  void set_allocated_account_cookie(std::string* account_cookie);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_cookie();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_cookie(
      std::string* account_cookie);
  private:
  const std::string& _internal_account_cookie() const;
  void _internal_set_account_cookie(const std::string& value);
  std::string* _internal_mutable_account_cookie();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string portfolio = 4;
  void clear_portfolio();
  const std::string& portfolio() const;
  void set_portfolio(const std::string& value);
  void set_portfolio(std::string&& value);
  void set_portfolio(const char* value);
  void set_portfolio(const char* value, size_t size);
  std::string* mutable_portfolio();
  std::string* release_portfolio();
  void set_allocated_portfolio(std::string* portfolio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_portfolio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_portfolio(
      std::string* portfolio);
  private:
  const std::string& _internal_portfolio() const;
  void _internal_set_portfolio(const std::string& value);
  std::string* _internal_mutable_portfolio();
  public:

  // string broker_name = 5;
  void clear_broker_name();
  const std::string& broker_name() const;
  void set_broker_name(const std::string& value);
  void set_broker_name(std::string&& value);
  void set_broker_name(const char* value);
  void set_broker_name(const char* value, size_t size);
  std::string* mutable_broker_name();
  std::string* release_broker_name();
  void set_allocated_broker_name(std::string* broker_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_broker_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_broker_name(
      std::string* broker_name);
  private:
  const std::string& _internal_broker_name() const;
  void _internal_set_broker_name(const std::string& value);
  std::string* _internal_mutable_broker_name();
  public:

  // string capital_password = 6;
  void clear_capital_password();
  const std::string& capital_password() const;
  void set_capital_password(const std::string& value);
  void set_capital_password(std::string&& value);
  void set_capital_password(const char* value);
  void set_capital_password(const char* value, size_t size);
  std::string* mutable_capital_password();
  std::string* release_capital_password();
  void set_allocated_capital_password(std::string* capital_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_capital_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_capital_password(
      std::string* capital_password);
  private:
  const std::string& _internal_capital_password() const;
  void _internal_set_capital_password(const std::string& value);
  std::string* _internal_mutable_capital_password();
  public:

  // string bank_password = 7;
  void clear_bank_password();
  const std::string& bank_password() const;
  void set_bank_password(const std::string& value);
  void set_bank_password(std::string&& value);
  void set_bank_password(const char* value);
  void set_bank_password(const char* value, size_t size);
  std::string* mutable_bank_password();
  std::string* release_bank_password();
  void set_allocated_bank_password(std::string* bank_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bank_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bank_password(
      std::string* bank_password);
  private:
  const std::string& _internal_bank_password() const;
  void _internal_set_bank_password(const std::string& value);
  std::string* _internal_mutable_bank_password();
  public:

  // string bankid = 8;
  void clear_bankid();
  const std::string& bankid() const;
  void set_bankid(const std::string& value);
  void set_bankid(std::string&& value);
  void set_bankid(const char* value);
  void set_bankid(const char* value, size_t size);
  std::string* mutable_bankid();
  std::string* release_bankid();
  void set_allocated_bankid(std::string* bankid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bankid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bankid(
      std::string* bankid);
  private:
  const std::string& _internal_bankid() const;
  void _internal_set_bankid(const std::string& value);
  std::string* _internal_mutable_bankid();
  public:

  // string investor_name = 9;
  void clear_investor_name();
  const std::string& investor_name() const;
  void set_investor_name(const std::string& value);
  void set_investor_name(std::string&& value);
  void set_investor_name(const char* value);
  void set_investor_name(const char* value, size_t size);
  std::string* mutable_investor_name();
  std::string* release_investor_name();
  void set_allocated_investor_name(std::string* investor_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_investor_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_investor_name(
      std::string* investor_name);
  private:
  const std::string& _internal_investor_name() const;
  void _internal_set_investor_name(const std::string& value);
  std::string* _internal_mutable_investor_name();
  public:

  // string pub_host = 11;
  void clear_pub_host();
  const std::string& pub_host() const;
  void set_pub_host(const std::string& value);
  void set_pub_host(std::string&& value);
  void set_pub_host(const char* value);
  void set_pub_host(const char* value, size_t size);
  std::string* mutable_pub_host();
  std::string* release_pub_host();
  void set_allocated_pub_host(std::string* pub_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pub_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pub_host(
      std::string* pub_host);
  private:
  const std::string& _internal_pub_host() const;
  void _internal_set_pub_host(const std::string& value);
  std::string* _internal_mutable_pub_host();
  public:

  // string taskid = 13;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_taskid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_taskid(
      std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string trade_host = 14;
  void clear_trade_host();
  const std::string& trade_host() const;
  void set_trade_host(const std::string& value);
  void set_trade_host(std::string&& value);
  void set_trade_host(const char* value);
  void set_trade_host(const char* value, size_t size);
  std::string* mutable_trade_host();
  std::string* release_trade_host();
  void set_allocated_trade_host(std::string* trade_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trade_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trade_host(
      std::string* trade_host);
  private:
  const std::string& _internal_trade_host() const;
  void _internal_set_trade_host(const std::string& value);
  std::string* _internal_mutable_trade_host();
  public:

  // string updatetime = 15;
  void clear_updatetime();
  const std::string& updatetime() const;
  void set_updatetime(const std::string& value);
  void set_updatetime(std::string&& value);
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  std::string* mutable_updatetime();
  std::string* release_updatetime();
  void set_allocated_updatetime(std::string* updatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updatetime(
      std::string* updatetime);
  private:
  const std::string& _internal_updatetime() const;
  void _internal_set_updatetime(const std::string& value);
  std::string* _internal_mutable_updatetime();
  public:

  // string wsuri = 16;
  void clear_wsuri();
  const std::string& wsuri() const;
  void set_wsuri(const std::string& value);
  void set_wsuri(std::string&& value);
  void set_wsuri(const char* value);
  void set_wsuri(const char* value, size_t size);
  std::string* mutable_wsuri();
  std::string* release_wsuri();
  void set_allocated_wsuri(std::string* wsuri);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wsuri();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wsuri(
      std::string* wsuri);
  private:
  const std::string& _internal_wsuri() const;
  void _internal_set_wsuri(const std::string& value);
  std::string* _internal_mutable_wsuri();
  public:

  // string bankname = 17;
  void clear_bankname();
  const std::string& bankname() const;
  void set_bankname(const std::string& value);
  void set_bankname(std::string&& value);
  void set_bankname(const char* value);
  void set_bankname(const char* value, size_t size);
  std::string* mutable_bankname();
  std::string* release_bankname();
  void set_allocated_bankname(std::string* bankname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bankname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bankname(
      std::string* bankname);
  private:
  const std::string& _internal_bankname() const;
  void _internal_set_bankname(const std::string& value);
  std::string* _internal_mutable_bankname();
  public:

  // string trading_day = 18;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trading_day();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trading_day(
      std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // .Account accounts = 20;
  bool has_accounts() const;
  private:
  bool _internal_has_accounts() const;
  public:
  void clear_accounts();
  const ::Account& accounts() const;
  ::Account* release_accounts();
  ::Account* mutable_accounts();
  void set_allocated_accounts(::Account* accounts);
  private:
  const ::Account& _internal_accounts() const;
  ::Account* _internal_mutable_accounts();
  public:
  void unsafe_arena_set_allocated_accounts(
      ::Account* accounts);
  ::Account* unsafe_arena_release_accounts();

  // float money = 10;
  void clear_money();
  float money() const;
  void set_money(float value);
  private:
  float _internal_money() const;
  void _internal_set_money(float value);
  public:

  // int32 status = 19;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ping_gap = 27;
  void clear_ping_gap();
  ::PROTOBUF_NAMESPACE_ID::int32 ping_gap() const;
  void set_ping_gap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping_gap() const;
  void _internal_set_ping_gap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:QIFI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_SettlementEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > settlement_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_BanksEntry_DoNotUse,
      std::string, ::Bank,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > banks_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_EventEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > event_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_OrdersEntry_DoNotUse,
      std::string, ::Order,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_PositonsEntry_DoNotUse,
      std::string, ::Position,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > positons_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_TradesEntry_DoNotUse,
      std::string, ::Trade,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > trades_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QIFI_TransfersEntry_DoNotUse,
      std::string, ::Transfer,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > transfers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr databaseip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_cookie_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr portfolio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capital_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bank_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bankid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wsuri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bankname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::Account* accounts_;
  float money_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_gap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_qifi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string user_id = 1;
inline void Account::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::user_id() const {
  // @@protoc_insertion_point(field_get:Account.user_id)
  return _internal_user_id();
}
inline void Account::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Account.user_id)
}
inline std::string* Account::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:Account.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Account::_internal_user_id() const {
  return user_id_.Get();
}
inline void Account::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Account.user_id)
}
inline void Account::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Account.user_id)
}
inline void Account::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Account.user_id)
}
inline std::string* Account::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_user_id() {
  // @@protoc_insertion_point(field_release:Account.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Account.user_id)
}
inline std::string* Account::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Account.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Account::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Account.user_id)
}

// string currency = 2;
inline void Account::clear_currency() {
  currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::currency() const {
  // @@protoc_insertion_point(field_get:Account.currency)
  return _internal_currency();
}
inline void Account::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Account.currency)
}
inline std::string* Account::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Account.currency)
  return _internal_mutable_currency();
}
inline const std::string& Account::_internal_currency() const {
  return currency_.Get();
}
inline void Account::_internal_set_currency(const std::string& value) {
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_currency(std::string&& value) {
  
  currency_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Account.currency)
}
inline void Account::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Account.currency)
}
inline void Account::set_currency(const char* value,
    size_t size) {
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Account.currency)
}
inline std::string* Account::_internal_mutable_currency() {
  
  return currency_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_currency() {
  // @@protoc_insertion_point(field_release:Account.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Account.currency)
}
inline std::string* Account::unsafe_arena_release_currency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Account.currency)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currency_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Account::unsafe_arena_set_allocated_currency(
    std::string* currency) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currency, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Account.currency)
}

// float pre_balance = 3;
inline void Account::clear_pre_balance() {
  pre_balance_ = 0;
}
inline float Account::_internal_pre_balance() const {
  return pre_balance_;
}
inline float Account::pre_balance() const {
  // @@protoc_insertion_point(field_get:Account.pre_balance)
  return _internal_pre_balance();
}
inline void Account::_internal_set_pre_balance(float value) {
  
  pre_balance_ = value;
}
inline void Account::set_pre_balance(float value) {
  _internal_set_pre_balance(value);
  // @@protoc_insertion_point(field_set:Account.pre_balance)
}

// float deposit = 4;
inline void Account::clear_deposit() {
  deposit_ = 0;
}
inline float Account::_internal_deposit() const {
  return deposit_;
}
inline float Account::deposit() const {
  // @@protoc_insertion_point(field_get:Account.deposit)
  return _internal_deposit();
}
inline void Account::_internal_set_deposit(float value) {
  
  deposit_ = value;
}
inline void Account::set_deposit(float value) {
  _internal_set_deposit(value);
  // @@protoc_insertion_point(field_set:Account.deposit)
}

// float withdraw = 5;
inline void Account::clear_withdraw() {
  withdraw_ = 0;
}
inline float Account::_internal_withdraw() const {
  return withdraw_;
}
inline float Account::withdraw() const {
  // @@protoc_insertion_point(field_get:Account.withdraw)
  return _internal_withdraw();
}
inline void Account::_internal_set_withdraw(float value) {
  
  withdraw_ = value;
}
inline void Account::set_withdraw(float value) {
  _internal_set_withdraw(value);
  // @@protoc_insertion_point(field_set:Account.withdraw)
}

// float WithdrawQuota = 6;
inline void Account::clear_withdrawquota() {
  withdrawquota_ = 0;
}
inline float Account::_internal_withdrawquota() const {
  return withdrawquota_;
}
inline float Account::withdrawquota() const {
  // @@protoc_insertion_point(field_get:Account.WithdrawQuota)
  return _internal_withdrawquota();
}
inline void Account::_internal_set_withdrawquota(float value) {
  
  withdrawquota_ = value;
}
inline void Account::set_withdrawquota(float value) {
  _internal_set_withdrawquota(value);
  // @@protoc_insertion_point(field_set:Account.WithdrawQuota)
}

// float close_profit = 7;
inline void Account::clear_close_profit() {
  close_profit_ = 0;
}
inline float Account::_internal_close_profit() const {
  return close_profit_;
}
inline float Account::close_profit() const {
  // @@protoc_insertion_point(field_get:Account.close_profit)
  return _internal_close_profit();
}
inline void Account::_internal_set_close_profit(float value) {
  
  close_profit_ = value;
}
inline void Account::set_close_profit(float value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:Account.close_profit)
}

// float commission = 8;
inline void Account::clear_commission() {
  commission_ = 0;
}
inline float Account::_internal_commission() const {
  return commission_;
}
inline float Account::commission() const {
  // @@protoc_insertion_point(field_get:Account.commission)
  return _internal_commission();
}
inline void Account::_internal_set_commission(float value) {
  
  commission_ = value;
}
inline void Account::set_commission(float value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Account.commission)
}

// float premium = 9;
inline void Account::clear_premium() {
  premium_ = 0;
}
inline float Account::_internal_premium() const {
  return premium_;
}
inline float Account::premium() const {
  // @@protoc_insertion_point(field_get:Account.premium)
  return _internal_premium();
}
inline void Account::_internal_set_premium(float value) {
  
  premium_ = value;
}
inline void Account::set_premium(float value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:Account.premium)
}

// float static_balance = 10;
inline void Account::clear_static_balance() {
  static_balance_ = 0;
}
inline float Account::_internal_static_balance() const {
  return static_balance_;
}
inline float Account::static_balance() const {
  // @@protoc_insertion_point(field_get:Account.static_balance)
  return _internal_static_balance();
}
inline void Account::_internal_set_static_balance(float value) {
  
  static_balance_ = value;
}
inline void Account::set_static_balance(float value) {
  _internal_set_static_balance(value);
  // @@protoc_insertion_point(field_set:Account.static_balance)
}

// float position_profit = 11;
inline void Account::clear_position_profit() {
  position_profit_ = 0;
}
inline float Account::_internal_position_profit() const {
  return position_profit_;
}
inline float Account::position_profit() const {
  // @@protoc_insertion_point(field_get:Account.position_profit)
  return _internal_position_profit();
}
inline void Account::_internal_set_position_profit(float value) {
  
  position_profit_ = value;
}
inline void Account::set_position_profit(float value) {
  _internal_set_position_profit(value);
  // @@protoc_insertion_point(field_set:Account.position_profit)
}

// float float_profit = 12;
inline void Account::clear_float_profit() {
  float_profit_ = 0;
}
inline float Account::_internal_float_profit() const {
  return float_profit_;
}
inline float Account::float_profit() const {
  // @@protoc_insertion_point(field_get:Account.float_profit)
  return _internal_float_profit();
}
inline void Account::_internal_set_float_profit(float value) {
  
  float_profit_ = value;
}
inline void Account::set_float_profit(float value) {
  _internal_set_float_profit(value);
  // @@protoc_insertion_point(field_set:Account.float_profit)
}

// float balance = 13;
inline void Account::clear_balance() {
  balance_ = 0;
}
inline float Account::_internal_balance() const {
  return balance_;
}
inline float Account::balance() const {
  // @@protoc_insertion_point(field_get:Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(float value) {
  
  balance_ = value;
}
inline void Account::set_balance(float value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:Account.balance)
}

// float margin = 14;
inline void Account::clear_margin() {
  margin_ = 0;
}
inline float Account::_internal_margin() const {
  return margin_;
}
inline float Account::margin() const {
  // @@protoc_insertion_point(field_get:Account.margin)
  return _internal_margin();
}
inline void Account::_internal_set_margin(float value) {
  
  margin_ = value;
}
inline void Account::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:Account.margin)
}

// float frozen_margin = 15;
inline void Account::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline float Account::_internal_frozen_margin() const {
  return frozen_margin_;
}
inline float Account::frozen_margin() const {
  // @@protoc_insertion_point(field_get:Account.frozen_margin)
  return _internal_frozen_margin();
}
inline void Account::_internal_set_frozen_margin(float value) {
  
  frozen_margin_ = value;
}
inline void Account::set_frozen_margin(float value) {
  _internal_set_frozen_margin(value);
  // @@protoc_insertion_point(field_set:Account.frozen_margin)
}

// float frozen_commission = 16;
inline void Account::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline float Account::_internal_frozen_commission() const {
  return frozen_commission_;
}
inline float Account::frozen_commission() const {
  // @@protoc_insertion_point(field_get:Account.frozen_commission)
  return _internal_frozen_commission();
}
inline void Account::_internal_set_frozen_commission(float value) {
  
  frozen_commission_ = value;
}
inline void Account::set_frozen_commission(float value) {
  _internal_set_frozen_commission(value);
  // @@protoc_insertion_point(field_set:Account.frozen_commission)
}

// float frozen_premium = 17;
inline void Account::clear_frozen_premium() {
  frozen_premium_ = 0;
}
inline float Account::_internal_frozen_premium() const {
  return frozen_premium_;
}
inline float Account::frozen_premium() const {
  // @@protoc_insertion_point(field_get:Account.frozen_premium)
  return _internal_frozen_premium();
}
inline void Account::_internal_set_frozen_premium(float value) {
  
  frozen_premium_ = value;
}
inline void Account::set_frozen_premium(float value) {
  _internal_set_frozen_premium(value);
  // @@protoc_insertion_point(field_set:Account.frozen_premium)
}

// float available = 18;
inline void Account::clear_available() {
  available_ = 0;
}
inline float Account::_internal_available() const {
  return available_;
}
inline float Account::available() const {
  // @@protoc_insertion_point(field_get:Account.available)
  return _internal_available();
}
inline void Account::_internal_set_available(float value) {
  
  available_ = value;
}
inline void Account::set_available(float value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:Account.available)
}

// float risk_ratio = 19;
inline void Account::clear_risk_ratio() {
  risk_ratio_ = 0;
}
inline float Account::_internal_risk_ratio() const {
  return risk_ratio_;
}
inline float Account::risk_ratio() const {
  // @@protoc_insertion_point(field_get:Account.risk_ratio)
  return _internal_risk_ratio();
}
inline void Account::_internal_set_risk_ratio(float value) {
  
  risk_ratio_ = value;
}
inline void Account::set_risk_ratio(float value) {
  _internal_set_risk_ratio(value);
  // @@protoc_insertion_point(field_set:Account.risk_ratio)
}

// -------------------------------------------------------------------

// Trade

// int32 seqno = 1;
inline void Trade::clear_seqno() {
  seqno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trade::_internal_seqno() const {
  return seqno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trade::seqno() const {
  // @@protoc_insertion_point(field_get:Trade.seqno)
  return _internal_seqno();
}
inline void Trade::_internal_set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seqno_ = value;
}
inline void Trade::set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:Trade.seqno)
}

// string user_id = 2;
inline void Trade::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::user_id() const {
  // @@protoc_insertion_point(field_get:Trade.user_id)
  return _internal_user_id();
}
inline void Trade::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Trade.user_id)
}
inline std::string* Trade::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:Trade.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Trade::_internal_user_id() const {
  return user_id_.Get();
}
inline void Trade::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.user_id)
}
inline void Trade::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.user_id)
}
inline void Trade::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.user_id)
}
inline std::string* Trade::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_user_id() {
  // @@protoc_insertion_point(field_release:Trade.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.user_id)
}
inline std::string* Trade::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.user_id)
}

// string trade_id = 3;
inline void Trade::clear_trade_id() {
  trade_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::trade_id() const {
  // @@protoc_insertion_point(field_get:Trade.trade_id)
  return _internal_trade_id();
}
inline void Trade::set_trade_id(const std::string& value) {
  _internal_set_trade_id(value);
  // @@protoc_insertion_point(field_set:Trade.trade_id)
}
inline std::string* Trade::mutable_trade_id() {
  // @@protoc_insertion_point(field_mutable:Trade.trade_id)
  return _internal_mutable_trade_id();
}
inline const std::string& Trade::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void Trade::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_trade_id(std::string&& value) {
  
  trade_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.trade_id)
}
inline void Trade::set_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.trade_id)
}
inline void Trade::set_trade_id(const char* value,
    size_t size) {
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.trade_id)
}
inline std::string* Trade::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_trade_id() {
  // @@protoc_insertion_point(field_release:Trade.trade_id)
  return trade_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.trade_id)
}
inline std::string* Trade::unsafe_arena_release_trade_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.trade_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trade_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_trade_id(
    std::string* trade_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trade_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.trade_id)
}

// string exchange_id = 4;
inline void Trade::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::exchange_id() const {
  // @@protoc_insertion_point(field_get:Trade.exchange_id)
  return _internal_exchange_id();
}
inline void Trade::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:Trade.exchange_id)
}
inline std::string* Trade::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:Trade.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& Trade::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void Trade::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.exchange_id)
}
inline void Trade::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.exchange_id)
}
inline void Trade::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.exchange_id)
}
inline std::string* Trade::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_exchange_id() {
  // @@protoc_insertion_point(field_release:Trade.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.exchange_id)
}
inline std::string* Trade::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.exchange_id)
}

// string instrument_id = 5;
inline void Trade::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::instrument_id() const {
  // @@protoc_insertion_point(field_get:Trade.instrument_id)
  return _internal_instrument_id();
}
inline void Trade::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:Trade.instrument_id)
}
inline std::string* Trade::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:Trade.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& Trade::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void Trade::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.instrument_id)
}
inline void Trade::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.instrument_id)
}
inline void Trade::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.instrument_id)
}
inline std::string* Trade::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_instrument_id() {
  // @@protoc_insertion_point(field_release:Trade.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.instrument_id)
}
inline std::string* Trade::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.instrument_id)
}

// string order_id = 6;
inline void Trade::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::order_id() const {
  // @@protoc_insertion_point(field_get:Trade.order_id)
  return _internal_order_id();
}
inline void Trade::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Trade.order_id)
}
inline std::string* Trade::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:Trade.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& Trade::_internal_order_id() const {
  return order_id_.Get();
}
inline void Trade::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.order_id)
}
inline void Trade::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.order_id)
}
inline void Trade::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.order_id)
}
inline std::string* Trade::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_order_id() {
  // @@protoc_insertion_point(field_release:Trade.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.order_id)
}
inline std::string* Trade::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.order_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return order_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_order_id(
    std::string* order_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.order_id)
}

// string exchange_trade_id = 7;
inline void Trade::clear_exchange_trade_id() {
  exchange_trade_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::exchange_trade_id() const {
  // @@protoc_insertion_point(field_get:Trade.exchange_trade_id)
  return _internal_exchange_trade_id();
}
inline void Trade::set_exchange_trade_id(const std::string& value) {
  _internal_set_exchange_trade_id(value);
  // @@protoc_insertion_point(field_set:Trade.exchange_trade_id)
}
inline std::string* Trade::mutable_exchange_trade_id() {
  // @@protoc_insertion_point(field_mutable:Trade.exchange_trade_id)
  return _internal_mutable_exchange_trade_id();
}
inline const std::string& Trade::_internal_exchange_trade_id() const {
  return exchange_trade_id_.Get();
}
inline void Trade::_internal_set_exchange_trade_id(const std::string& value) {
  
  exchange_trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_exchange_trade_id(std::string&& value) {
  
  exchange_trade_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.exchange_trade_id)
}
inline void Trade::set_exchange_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.exchange_trade_id)
}
inline void Trade::set_exchange_trade_id(const char* value,
    size_t size) {
  
  exchange_trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.exchange_trade_id)
}
inline std::string* Trade::_internal_mutable_exchange_trade_id() {
  
  return exchange_trade_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_exchange_trade_id() {
  // @@protoc_insertion_point(field_release:Trade.exchange_trade_id)
  return exchange_trade_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_exchange_trade_id(std::string* exchange_trade_id) {
  if (exchange_trade_id != nullptr) {
    
  } else {
    
  }
  exchange_trade_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_trade_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.exchange_trade_id)
}
inline std::string* Trade::unsafe_arena_release_exchange_trade_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.exchange_trade_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_trade_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_exchange_trade_id(
    std::string* exchange_trade_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_trade_id != nullptr) {
    
  } else {
    
  }
  exchange_trade_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_trade_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.exchange_trade_id)
}

// string direction = 8;
inline void Trade::clear_direction() {
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trade::direction() const {
  // @@protoc_insertion_point(field_get:Trade.direction)
  return _internal_direction();
}
inline void Trade::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:Trade.direction)
}
inline std::string* Trade::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:Trade.direction)
  return _internal_mutable_direction();
}
inline const std::string& Trade::_internal_direction() const {
  return direction_.Get();
}
inline void Trade::_internal_set_direction(const std::string& value) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trade::set_direction(std::string&& value) {
  
  direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Trade.direction)
}
inline void Trade::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Trade.direction)
}
inline void Trade::set_direction(const char* value,
    size_t size) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Trade.direction)
}
inline std::string* Trade::_internal_mutable_direction() {
  
  return direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trade::release_direction() {
  // @@protoc_insertion_point(field_release:Trade.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Trade.direction)
}
inline std::string* Trade::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Trade.direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trade::unsafe_arena_set_allocated_direction(
    std::string* direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trade.direction)
}

// float offset = 9;
inline void Trade::clear_offset() {
  offset_ = 0;
}
inline float Trade::_internal_offset() const {
  return offset_;
}
inline float Trade::offset() const {
  // @@protoc_insertion_point(field_get:Trade.offset)
  return _internal_offset();
}
inline void Trade::_internal_set_offset(float value) {
  
  offset_ = value;
}
inline void Trade::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Trade.offset)
}

// float volume = 10;
inline void Trade::clear_volume() {
  volume_ = 0;
}
inline float Trade::_internal_volume() const {
  return volume_;
}
inline float Trade::volume() const {
  // @@protoc_insertion_point(field_get:Trade.volume)
  return _internal_volume();
}
inline void Trade::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void Trade::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Trade.volume)
}

// float price = 11;
inline void Trade::clear_price() {
  price_ = 0;
}
inline float Trade::_internal_price() const {
  return price_;
}
inline float Trade::price() const {
  // @@protoc_insertion_point(field_get:Trade.price)
  return _internal_price();
}
inline void Trade::_internal_set_price(float value) {
  
  price_ = value;
}
inline void Trade::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Trade.price)
}

// int64 trade_date_time = 12;
inline void Trade::clear_trade_date_time() {
  trade_date_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::_internal_trade_date_time() const {
  return trade_date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::trade_date_time() const {
  // @@protoc_insertion_point(field_get:Trade.trade_date_time)
  return _internal_trade_date_time();
}
inline void Trade::_internal_set_trade_date_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trade_date_time_ = value;
}
inline void Trade::set_trade_date_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trade_date_time(value);
  // @@protoc_insertion_point(field_set:Trade.trade_date_time)
}

// -------------------------------------------------------------------

// Order

// int32 seqno = 1;
inline void Order::clear_seqno() {
  seqno_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_seqno() const {
  return seqno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::seqno() const {
  // @@protoc_insertion_point(field_get:Order.seqno)
  return _internal_seqno();
}
inline void Order::_internal_set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seqno_ = value;
}
inline void Order::set_seqno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:Order.seqno)
}

// string user_id = 2;
inline void Order::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::user_id() const {
  // @@protoc_insertion_point(field_get:Order.user_id)
  return _internal_user_id();
}
inline void Order::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Order.user_id)
}
inline std::string* Order::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:Order.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Order::_internal_user_id() const {
  return user_id_.Get();
}
inline void Order::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.user_id)
}
inline void Order::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.user_id)
}
inline void Order::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.user_id)
}
inline std::string* Order::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_user_id() {
  // @@protoc_insertion_point(field_release:Order.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.user_id)
}
inline std::string* Order::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.user_id)
}

// string order_id = 3;
inline void Order::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::order_id() const {
  // @@protoc_insertion_point(field_get:Order.order_id)
  return _internal_order_id();
}
inline void Order::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Order.order_id)
}
inline std::string* Order::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:Order.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& Order::_internal_order_id() const {
  return order_id_.Get();
}
inline void Order::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.order_id)
}
inline void Order::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.order_id)
}
inline void Order::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.order_id)
}
inline std::string* Order::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_order_id() {
  // @@protoc_insertion_point(field_release:Order.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.order_id)
}
inline std::string* Order::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.order_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return order_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_order_id(
    std::string* order_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.order_id)
}

// string exchange_id = 4;
inline void Order::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::exchange_id() const {
  // @@protoc_insertion_point(field_get:Order.exchange_id)
  return _internal_exchange_id();
}
inline void Order::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:Order.exchange_id)
}
inline std::string* Order::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:Order.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& Order::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void Order::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.exchange_id)
}
inline void Order::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.exchange_id)
}
inline void Order::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.exchange_id)
}
inline std::string* Order::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_exchange_id() {
  // @@protoc_insertion_point(field_release:Order.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.exchange_id)
}
inline std::string* Order::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.exchange_id)
}

// string instrument_id = 5;
inline void Order::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::instrument_id() const {
  // @@protoc_insertion_point(field_get:Order.instrument_id)
  return _internal_instrument_id();
}
inline void Order::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:Order.instrument_id)
}
inline std::string* Order::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:Order.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& Order::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void Order::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.instrument_id)
}
inline void Order::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.instrument_id)
}
inline void Order::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.instrument_id)
}
inline std::string* Order::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_instrument_id() {
  // @@protoc_insertion_point(field_release:Order.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.instrument_id)
}
inline std::string* Order::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.instrument_id)
}

// string direction = 6;
inline void Order::clear_direction() {
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::direction() const {
  // @@protoc_insertion_point(field_get:Order.direction)
  return _internal_direction();
}
inline void Order::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:Order.direction)
}
inline std::string* Order::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:Order.direction)
  return _internal_mutable_direction();
}
inline const std::string& Order::_internal_direction() const {
  return direction_.Get();
}
inline void Order::_internal_set_direction(const std::string& value) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_direction(std::string&& value) {
  
  direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.direction)
}
inline void Order::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.direction)
}
inline void Order::set_direction(const char* value,
    size_t size) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.direction)
}
inline std::string* Order::_internal_mutable_direction() {
  
  return direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_direction() {
  // @@protoc_insertion_point(field_release:Order.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.direction)
}
inline std::string* Order::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_direction(
    std::string* direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.direction)
}

// string offset = 7;
inline void Order::clear_offset() {
  offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::offset() const {
  // @@protoc_insertion_point(field_get:Order.offset)
  return _internal_offset();
}
inline void Order::set_offset(const std::string& value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Order.offset)
}
inline std::string* Order::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:Order.offset)
  return _internal_mutable_offset();
}
inline const std::string& Order::_internal_offset() const {
  return offset_.Get();
}
inline void Order::_internal_set_offset(const std::string& value) {
  
  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_offset(std::string&& value) {
  
  offset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.offset)
}
inline void Order::set_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.offset)
}
inline void Order::set_offset(const char* value,
    size_t size) {
  
  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.offset)
}
inline std::string* Order::_internal_mutable_offset() {
  
  return offset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_offset() {
  // @@protoc_insertion_point(field_release:Order.offset)
  return offset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {
    
  } else {
    
  }
  offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.offset)
}
inline std::string* Order::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.offset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return offset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_offset(
    std::string* offset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (offset != nullptr) {
    
  } else {
    
  }
  offset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      offset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.offset)
}

// float volume_orign = 8;
inline void Order::clear_volume_orign() {
  volume_orign_ = 0;
}
inline float Order::_internal_volume_orign() const {
  return volume_orign_;
}
inline float Order::volume_orign() const {
  // @@protoc_insertion_point(field_get:Order.volume_orign)
  return _internal_volume_orign();
}
inline void Order::_internal_set_volume_orign(float value) {
  
  volume_orign_ = value;
}
inline void Order::set_volume_orign(float value) {
  _internal_set_volume_orign(value);
  // @@protoc_insertion_point(field_set:Order.volume_orign)
}

// string price_type = 9;
inline void Order::clear_price_type() {
  price_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::price_type() const {
  // @@protoc_insertion_point(field_get:Order.price_type)
  return _internal_price_type();
}
inline void Order::set_price_type(const std::string& value) {
  _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:Order.price_type)
}
inline std::string* Order::mutable_price_type() {
  // @@protoc_insertion_point(field_mutable:Order.price_type)
  return _internal_mutable_price_type();
}
inline const std::string& Order::_internal_price_type() const {
  return price_type_.Get();
}
inline void Order::_internal_set_price_type(const std::string& value) {
  
  price_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_price_type(std::string&& value) {
  
  price_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.price_type)
}
inline void Order::set_price_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.price_type)
}
inline void Order::set_price_type(const char* value,
    size_t size) {
  
  price_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.price_type)
}
inline std::string* Order::_internal_mutable_price_type() {
  
  return price_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_price_type() {
  // @@protoc_insertion_point(field_release:Order.price_type)
  return price_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_price_type(std::string* price_type) {
  if (price_type != nullptr) {
    
  } else {
    
  }
  price_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.price_type)
}
inline std::string* Order::unsafe_arena_release_price_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.price_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return price_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_price_type(
    std::string* price_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (price_type != nullptr) {
    
  } else {
    
  }
  price_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      price_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.price_type)
}

// float limit_price = 10;
inline void Order::clear_limit_price() {
  limit_price_ = 0;
}
inline float Order::_internal_limit_price() const {
  return limit_price_;
}
inline float Order::limit_price() const {
  // @@protoc_insertion_point(field_get:Order.limit_price)
  return _internal_limit_price();
}
inline void Order::_internal_set_limit_price(float value) {
  
  limit_price_ = value;
}
inline void Order::set_limit_price(float value) {
  _internal_set_limit_price(value);
  // @@protoc_insertion_point(field_set:Order.limit_price)
}

// string time_condition = 11;
inline void Order::clear_time_condition() {
  time_condition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::time_condition() const {
  // @@protoc_insertion_point(field_get:Order.time_condition)
  return _internal_time_condition();
}
inline void Order::set_time_condition(const std::string& value) {
  _internal_set_time_condition(value);
  // @@protoc_insertion_point(field_set:Order.time_condition)
}
inline std::string* Order::mutable_time_condition() {
  // @@protoc_insertion_point(field_mutable:Order.time_condition)
  return _internal_mutable_time_condition();
}
inline const std::string& Order::_internal_time_condition() const {
  return time_condition_.Get();
}
inline void Order::_internal_set_time_condition(const std::string& value) {
  
  time_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_time_condition(std::string&& value) {
  
  time_condition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.time_condition)
}
inline void Order::set_time_condition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.time_condition)
}
inline void Order::set_time_condition(const char* value,
    size_t size) {
  
  time_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.time_condition)
}
inline std::string* Order::_internal_mutable_time_condition() {
  
  return time_condition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_time_condition() {
  // @@protoc_insertion_point(field_release:Order.time_condition)
  return time_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_time_condition(std::string* time_condition) {
  if (time_condition != nullptr) {
    
  } else {
    
  }
  time_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_condition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.time_condition)
}
inline std::string* Order::unsafe_arena_release_time_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.time_condition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_condition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_time_condition(
    std::string* time_condition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_condition != nullptr) {
    
  } else {
    
  }
  time_condition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_condition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.time_condition)
}

// string volume_condition = 12;
inline void Order::clear_volume_condition() {
  volume_condition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::volume_condition() const {
  // @@protoc_insertion_point(field_get:Order.volume_condition)
  return _internal_volume_condition();
}
inline void Order::set_volume_condition(const std::string& value) {
  _internal_set_volume_condition(value);
  // @@protoc_insertion_point(field_set:Order.volume_condition)
}
inline std::string* Order::mutable_volume_condition() {
  // @@protoc_insertion_point(field_mutable:Order.volume_condition)
  return _internal_mutable_volume_condition();
}
inline const std::string& Order::_internal_volume_condition() const {
  return volume_condition_.Get();
}
inline void Order::_internal_set_volume_condition(const std::string& value) {
  
  volume_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_volume_condition(std::string&& value) {
  
  volume_condition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.volume_condition)
}
inline void Order::set_volume_condition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.volume_condition)
}
inline void Order::set_volume_condition(const char* value,
    size_t size) {
  
  volume_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.volume_condition)
}
inline std::string* Order::_internal_mutable_volume_condition() {
  
  return volume_condition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_volume_condition() {
  // @@protoc_insertion_point(field_release:Order.volume_condition)
  return volume_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_volume_condition(std::string* volume_condition) {
  if (volume_condition != nullptr) {
    
  } else {
    
  }
  volume_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_condition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.volume_condition)
}
inline std::string* Order::unsafe_arena_release_volume_condition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.volume_condition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return volume_condition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_volume_condition(
    std::string* volume_condition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (volume_condition != nullptr) {
    
  } else {
    
  }
  volume_condition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      volume_condition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.volume_condition)
}

// int64 insert_date_time = 13;
inline void Order::clear_insert_date_time() {
  insert_date_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_insert_date_time() const {
  return insert_date_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::insert_date_time() const {
  // @@protoc_insertion_point(field_get:Order.insert_date_time)
  return _internal_insert_date_time();
}
inline void Order::_internal_set_insert_date_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  insert_date_time_ = value;
}
inline void Order::set_insert_date_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_insert_date_time(value);
  // @@protoc_insertion_point(field_set:Order.insert_date_time)
}

// string exchange_order_id = 14;
inline void Order::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:Order.exchange_order_id)
  return _internal_exchange_order_id();
}
inline void Order::set_exchange_order_id(const std::string& value) {
  _internal_set_exchange_order_id(value);
  // @@protoc_insertion_point(field_set:Order.exchange_order_id)
}
inline std::string* Order::mutable_exchange_order_id() {
  // @@protoc_insertion_point(field_mutable:Order.exchange_order_id)
  return _internal_mutable_exchange_order_id();
}
inline const std::string& Order::_internal_exchange_order_id() const {
  return exchange_order_id_.Get();
}
inline void Order::_internal_set_exchange_order_id(const std::string& value) {
  
  exchange_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_exchange_order_id(std::string&& value) {
  
  exchange_order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.exchange_order_id)
}
inline void Order::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.exchange_order_id)
}
inline void Order::set_exchange_order_id(const char* value,
    size_t size) {
  
  exchange_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.exchange_order_id)
}
inline std::string* Order::_internal_mutable_exchange_order_id() {
  
  return exchange_order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:Order.exchange_order_id)
  return exchange_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_exchange_order_id(std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.exchange_order_id)
}
inline std::string* Order::unsafe_arena_release_exchange_order_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.exchange_order_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_order_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_exchange_order_id(
    std::string* exchange_order_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_order_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.exchange_order_id)
}

// string status = 15;
inline void Order::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::status() const {
  // @@protoc_insertion_point(field_get:Order.status)
  return _internal_status();
}
inline void Order::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Order.status)
}
inline std::string* Order::mutable_status() {
  // @@protoc_insertion_point(field_mutable:Order.status)
  return _internal_mutable_status();
}
inline const std::string& Order::_internal_status() const {
  return status_.Get();
}
inline void Order::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.status)
}
inline void Order::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.status)
}
inline void Order::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.status)
}
inline std::string* Order::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_status() {
  // @@protoc_insertion_point(field_release:Order.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.status)
}
inline std::string* Order::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.status)
}

// float volume_left = 16;
inline void Order::clear_volume_left() {
  volume_left_ = 0;
}
inline float Order::_internal_volume_left() const {
  return volume_left_;
}
inline float Order::volume_left() const {
  // @@protoc_insertion_point(field_get:Order.volume_left)
  return _internal_volume_left();
}
inline void Order::_internal_set_volume_left(float value) {
  
  volume_left_ = value;
}
inline void Order::set_volume_left(float value) {
  _internal_set_volume_left(value);
  // @@protoc_insertion_point(field_set:Order.volume_left)
}

// string last_msg = 17;
inline void Order::clear_last_msg() {
  last_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::last_msg() const {
  // @@protoc_insertion_point(field_get:Order.last_msg)
  return _internal_last_msg();
}
inline void Order::set_last_msg(const std::string& value) {
  _internal_set_last_msg(value);
  // @@protoc_insertion_point(field_set:Order.last_msg)
}
inline std::string* Order::mutable_last_msg() {
  // @@protoc_insertion_point(field_mutable:Order.last_msg)
  return _internal_mutable_last_msg();
}
inline const std::string& Order::_internal_last_msg() const {
  return last_msg_.Get();
}
inline void Order::_internal_set_last_msg(const std::string& value) {
  
  last_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_last_msg(std::string&& value) {
  
  last_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Order.last_msg)
}
inline void Order::set_last_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Order.last_msg)
}
inline void Order::set_last_msg(const char* value,
    size_t size) {
  
  last_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Order.last_msg)
}
inline std::string* Order::_internal_mutable_last_msg() {
  
  return last_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_last_msg() {
  // @@protoc_insertion_point(field_release:Order.last_msg)
  return last_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_last_msg(std::string* last_msg) {
  if (last_msg != nullptr) {
    
  } else {
    
  }
  last_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Order.last_msg)
}
inline std::string* Order::unsafe_arena_release_last_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Order.last_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_last_msg(
    std::string* last_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_msg != nullptr) {
    
  } else {
    
  }
  last_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Order.last_msg)
}

// -------------------------------------------------------------------

// Position

// string user_id = 1;
inline void Position::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Position::user_id() const {
  // @@protoc_insertion_point(field_get:Position.user_id)
  return _internal_user_id();
}
inline void Position::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Position.user_id)
}
inline std::string* Position::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:Position.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Position::_internal_user_id() const {
  return user_id_.Get();
}
inline void Position::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Position::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Position.user_id)
}
inline void Position::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Position.user_id)
}
inline void Position::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Position.user_id)
}
inline std::string* Position::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Position::release_user_id() {
  // @@protoc_insertion_point(field_release:Position.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Position.user_id)
}
inline std::string* Position::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Position.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Position::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Position.user_id)
}

// string exchange_id = 2;
inline void Position::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Position::exchange_id() const {
  // @@protoc_insertion_point(field_get:Position.exchange_id)
  return _internal_exchange_id();
}
inline void Position::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:Position.exchange_id)
}
inline std::string* Position::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:Position.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& Position::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void Position::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Position::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Position.exchange_id)
}
inline void Position::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Position.exchange_id)
}
inline void Position::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Position.exchange_id)
}
inline std::string* Position::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Position::release_exchange_id() {
  // @@protoc_insertion_point(field_release:Position.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Position.exchange_id)
}
inline std::string* Position::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Position.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Position::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Position.exchange_id)
}

// string instrument_id = 3;
inline void Position::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Position::instrument_id() const {
  // @@protoc_insertion_point(field_get:Position.instrument_id)
  return _internal_instrument_id();
}
inline void Position::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:Position.instrument_id)
}
inline std::string* Position::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:Position.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& Position::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void Position::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Position::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Position.instrument_id)
}
inline void Position::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Position.instrument_id)
}
inline void Position::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Position.instrument_id)
}
inline std::string* Position::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Position::release_instrument_id() {
  // @@protoc_insertion_point(field_release:Position.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Position.instrument_id)
}
inline std::string* Position::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Position.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Position::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Position.instrument_id)
}

// float volume_long_today = 4;
inline void Position::clear_volume_long_today() {
  volume_long_today_ = 0;
}
inline float Position::_internal_volume_long_today() const {
  return volume_long_today_;
}
inline float Position::volume_long_today() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_today)
  return _internal_volume_long_today();
}
inline void Position::_internal_set_volume_long_today(float value) {
  
  volume_long_today_ = value;
}
inline void Position::set_volume_long_today(float value) {
  _internal_set_volume_long_today(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_today)
}

// float volume_long_his = 5;
inline void Position::clear_volume_long_his() {
  volume_long_his_ = 0;
}
inline float Position::_internal_volume_long_his() const {
  return volume_long_his_;
}
inline float Position::volume_long_his() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_his)
  return _internal_volume_long_his();
}
inline void Position::_internal_set_volume_long_his(float value) {
  
  volume_long_his_ = value;
}
inline void Position::set_volume_long_his(float value) {
  _internal_set_volume_long_his(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_his)
}

// float volume_long = 6;
inline void Position::clear_volume_long() {
  volume_long_ = 0;
}
inline float Position::_internal_volume_long() const {
  return volume_long_;
}
inline float Position::volume_long() const {
  // @@protoc_insertion_point(field_get:Position.volume_long)
  return _internal_volume_long();
}
inline void Position::_internal_set_volume_long(float value) {
  
  volume_long_ = value;
}
inline void Position::set_volume_long(float value) {
  _internal_set_volume_long(value);
  // @@protoc_insertion_point(field_set:Position.volume_long)
}

// float volume_long_frozen_today = 7;
inline void Position::clear_volume_long_frozen_today() {
  volume_long_frozen_today_ = 0;
}
inline float Position::_internal_volume_long_frozen_today() const {
  return volume_long_frozen_today_;
}
inline float Position::volume_long_frozen_today() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_frozen_today)
  return _internal_volume_long_frozen_today();
}
inline void Position::_internal_set_volume_long_frozen_today(float value) {
  
  volume_long_frozen_today_ = value;
}
inline void Position::set_volume_long_frozen_today(float value) {
  _internal_set_volume_long_frozen_today(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_frozen_today)
}

// float volume_long_frozen_his = 8;
inline void Position::clear_volume_long_frozen_his() {
  volume_long_frozen_his_ = 0;
}
inline float Position::_internal_volume_long_frozen_his() const {
  return volume_long_frozen_his_;
}
inline float Position::volume_long_frozen_his() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_frozen_his)
  return _internal_volume_long_frozen_his();
}
inline void Position::_internal_set_volume_long_frozen_his(float value) {
  
  volume_long_frozen_his_ = value;
}
inline void Position::set_volume_long_frozen_his(float value) {
  _internal_set_volume_long_frozen_his(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_frozen_his)
}

// float volume_long_frozen = 9;
inline void Position::clear_volume_long_frozen() {
  volume_long_frozen_ = 0;
}
inline float Position::_internal_volume_long_frozen() const {
  return volume_long_frozen_;
}
inline float Position::volume_long_frozen() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_frozen)
  return _internal_volume_long_frozen();
}
inline void Position::_internal_set_volume_long_frozen(float value) {
  
  volume_long_frozen_ = value;
}
inline void Position::set_volume_long_frozen(float value) {
  _internal_set_volume_long_frozen(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_frozen)
}

// float volume_short_today = 10;
inline void Position::clear_volume_short_today() {
  volume_short_today_ = 0;
}
inline float Position::_internal_volume_short_today() const {
  return volume_short_today_;
}
inline float Position::volume_short_today() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_today)
  return _internal_volume_short_today();
}
inline void Position::_internal_set_volume_short_today(float value) {
  
  volume_short_today_ = value;
}
inline void Position::set_volume_short_today(float value) {
  _internal_set_volume_short_today(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_today)
}

// float volume_short_his = 11;
inline void Position::clear_volume_short_his() {
  volume_short_his_ = 0;
}
inline float Position::_internal_volume_short_his() const {
  return volume_short_his_;
}
inline float Position::volume_short_his() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_his)
  return _internal_volume_short_his();
}
inline void Position::_internal_set_volume_short_his(float value) {
  
  volume_short_his_ = value;
}
inline void Position::set_volume_short_his(float value) {
  _internal_set_volume_short_his(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_his)
}

// float volume_short = 12;
inline void Position::clear_volume_short() {
  volume_short_ = 0;
}
inline float Position::_internal_volume_short() const {
  return volume_short_;
}
inline float Position::volume_short() const {
  // @@protoc_insertion_point(field_get:Position.volume_short)
  return _internal_volume_short();
}
inline void Position::_internal_set_volume_short(float value) {
  
  volume_short_ = value;
}
inline void Position::set_volume_short(float value) {
  _internal_set_volume_short(value);
  // @@protoc_insertion_point(field_set:Position.volume_short)
}

// float volume_short_frozen_today = 13;
inline void Position::clear_volume_short_frozen_today() {
  volume_short_frozen_today_ = 0;
}
inline float Position::_internal_volume_short_frozen_today() const {
  return volume_short_frozen_today_;
}
inline float Position::volume_short_frozen_today() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_frozen_today)
  return _internal_volume_short_frozen_today();
}
inline void Position::_internal_set_volume_short_frozen_today(float value) {
  
  volume_short_frozen_today_ = value;
}
inline void Position::set_volume_short_frozen_today(float value) {
  _internal_set_volume_short_frozen_today(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_frozen_today)
}

// float volume_short_frozen_his = 14;
inline void Position::clear_volume_short_frozen_his() {
  volume_short_frozen_his_ = 0;
}
inline float Position::_internal_volume_short_frozen_his() const {
  return volume_short_frozen_his_;
}
inline float Position::volume_short_frozen_his() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_frozen_his)
  return _internal_volume_short_frozen_his();
}
inline void Position::_internal_set_volume_short_frozen_his(float value) {
  
  volume_short_frozen_his_ = value;
}
inline void Position::set_volume_short_frozen_his(float value) {
  _internal_set_volume_short_frozen_his(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_frozen_his)
}

// float volume_short_frozen = 15;
inline void Position::clear_volume_short_frozen() {
  volume_short_frozen_ = 0;
}
inline float Position::_internal_volume_short_frozen() const {
  return volume_short_frozen_;
}
inline float Position::volume_short_frozen() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_frozen)
  return _internal_volume_short_frozen();
}
inline void Position::_internal_set_volume_short_frozen(float value) {
  
  volume_short_frozen_ = value;
}
inline void Position::set_volume_short_frozen(float value) {
  _internal_set_volume_short_frozen(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_frozen)
}

// float volume_long_yd = 16;
inline void Position::clear_volume_long_yd() {
  volume_long_yd_ = 0;
}
inline float Position::_internal_volume_long_yd() const {
  return volume_long_yd_;
}
inline float Position::volume_long_yd() const {
  // @@protoc_insertion_point(field_get:Position.volume_long_yd)
  return _internal_volume_long_yd();
}
inline void Position::_internal_set_volume_long_yd(float value) {
  
  volume_long_yd_ = value;
}
inline void Position::set_volume_long_yd(float value) {
  _internal_set_volume_long_yd(value);
  // @@protoc_insertion_point(field_set:Position.volume_long_yd)
}

// float volume_short_yd = 17;
inline void Position::clear_volume_short_yd() {
  volume_short_yd_ = 0;
}
inline float Position::_internal_volume_short_yd() const {
  return volume_short_yd_;
}
inline float Position::volume_short_yd() const {
  // @@protoc_insertion_point(field_get:Position.volume_short_yd)
  return _internal_volume_short_yd();
}
inline void Position::_internal_set_volume_short_yd(float value) {
  
  volume_short_yd_ = value;
}
inline void Position::set_volume_short_yd(float value) {
  _internal_set_volume_short_yd(value);
  // @@protoc_insertion_point(field_set:Position.volume_short_yd)
}

// float pos_long_his = 18;
inline void Position::clear_pos_long_his() {
  pos_long_his_ = 0;
}
inline float Position::_internal_pos_long_his() const {
  return pos_long_his_;
}
inline float Position::pos_long_his() const {
  // @@protoc_insertion_point(field_get:Position.pos_long_his)
  return _internal_pos_long_his();
}
inline void Position::_internal_set_pos_long_his(float value) {
  
  pos_long_his_ = value;
}
inline void Position::set_pos_long_his(float value) {
  _internal_set_pos_long_his(value);
  // @@protoc_insertion_point(field_set:Position.pos_long_his)
}

// float pos_long_today = 19;
inline void Position::clear_pos_long_today() {
  pos_long_today_ = 0;
}
inline float Position::_internal_pos_long_today() const {
  return pos_long_today_;
}
inline float Position::pos_long_today() const {
  // @@protoc_insertion_point(field_get:Position.pos_long_today)
  return _internal_pos_long_today();
}
inline void Position::_internal_set_pos_long_today(float value) {
  
  pos_long_today_ = value;
}
inline void Position::set_pos_long_today(float value) {
  _internal_set_pos_long_today(value);
  // @@protoc_insertion_point(field_set:Position.pos_long_today)
}

// float pos_short_his = 20;
inline void Position::clear_pos_short_his() {
  pos_short_his_ = 0;
}
inline float Position::_internal_pos_short_his() const {
  return pos_short_his_;
}
inline float Position::pos_short_his() const {
  // @@protoc_insertion_point(field_get:Position.pos_short_his)
  return _internal_pos_short_his();
}
inline void Position::_internal_set_pos_short_his(float value) {
  
  pos_short_his_ = value;
}
inline void Position::set_pos_short_his(float value) {
  _internal_set_pos_short_his(value);
  // @@protoc_insertion_point(field_set:Position.pos_short_his)
}

// float pos_short_today = 21;
inline void Position::clear_pos_short_today() {
  pos_short_today_ = 0;
}
inline float Position::_internal_pos_short_today() const {
  return pos_short_today_;
}
inline float Position::pos_short_today() const {
  // @@protoc_insertion_point(field_get:Position.pos_short_today)
  return _internal_pos_short_today();
}
inline void Position::_internal_set_pos_short_today(float value) {
  
  pos_short_today_ = value;
}
inline void Position::set_pos_short_today(float value) {
  _internal_set_pos_short_today(value);
  // @@protoc_insertion_point(field_set:Position.pos_short_today)
}

// float open_price_long = 22;
inline void Position::clear_open_price_long() {
  open_price_long_ = 0;
}
inline float Position::_internal_open_price_long() const {
  return open_price_long_;
}
inline float Position::open_price_long() const {
  // @@protoc_insertion_point(field_get:Position.open_price_long)
  return _internal_open_price_long();
}
inline void Position::_internal_set_open_price_long(float value) {
  
  open_price_long_ = value;
}
inline void Position::set_open_price_long(float value) {
  _internal_set_open_price_long(value);
  // @@protoc_insertion_point(field_set:Position.open_price_long)
}

// float open_price_short = 23;
inline void Position::clear_open_price_short() {
  open_price_short_ = 0;
}
inline float Position::_internal_open_price_short() const {
  return open_price_short_;
}
inline float Position::open_price_short() const {
  // @@protoc_insertion_point(field_get:Position.open_price_short)
  return _internal_open_price_short();
}
inline void Position::_internal_set_open_price_short(float value) {
  
  open_price_short_ = value;
}
inline void Position::set_open_price_short(float value) {
  _internal_set_open_price_short(value);
  // @@protoc_insertion_point(field_set:Position.open_price_short)
}

// float open_cost_long = 24;
inline void Position::clear_open_cost_long() {
  open_cost_long_ = 0;
}
inline float Position::_internal_open_cost_long() const {
  return open_cost_long_;
}
inline float Position::open_cost_long() const {
  // @@protoc_insertion_point(field_get:Position.open_cost_long)
  return _internal_open_cost_long();
}
inline void Position::_internal_set_open_cost_long(float value) {
  
  open_cost_long_ = value;
}
inline void Position::set_open_cost_long(float value) {
  _internal_set_open_cost_long(value);
  // @@protoc_insertion_point(field_set:Position.open_cost_long)
}

// float open_cost_short = 25;
inline void Position::clear_open_cost_short() {
  open_cost_short_ = 0;
}
inline float Position::_internal_open_cost_short() const {
  return open_cost_short_;
}
inline float Position::open_cost_short() const {
  // @@protoc_insertion_point(field_get:Position.open_cost_short)
  return _internal_open_cost_short();
}
inline void Position::_internal_set_open_cost_short(float value) {
  
  open_cost_short_ = value;
}
inline void Position::set_open_cost_short(float value) {
  _internal_set_open_cost_short(value);
  // @@protoc_insertion_point(field_set:Position.open_cost_short)
}

// float position_price_long = 26;
inline void Position::clear_position_price_long() {
  position_price_long_ = 0;
}
inline float Position::_internal_position_price_long() const {
  return position_price_long_;
}
inline float Position::position_price_long() const {
  // @@protoc_insertion_point(field_get:Position.position_price_long)
  return _internal_position_price_long();
}
inline void Position::_internal_set_position_price_long(float value) {
  
  position_price_long_ = value;
}
inline void Position::set_position_price_long(float value) {
  _internal_set_position_price_long(value);
  // @@protoc_insertion_point(field_set:Position.position_price_long)
}

// float position_price_short = 27;
inline void Position::clear_position_price_short() {
  position_price_short_ = 0;
}
inline float Position::_internal_position_price_short() const {
  return position_price_short_;
}
inline float Position::position_price_short() const {
  // @@protoc_insertion_point(field_get:Position.position_price_short)
  return _internal_position_price_short();
}
inline void Position::_internal_set_position_price_short(float value) {
  
  position_price_short_ = value;
}
inline void Position::set_position_price_short(float value) {
  _internal_set_position_price_short(value);
  // @@protoc_insertion_point(field_set:Position.position_price_short)
}

// float position_cost_long = 28;
inline void Position::clear_position_cost_long() {
  position_cost_long_ = 0;
}
inline float Position::_internal_position_cost_long() const {
  return position_cost_long_;
}
inline float Position::position_cost_long() const {
  // @@protoc_insertion_point(field_get:Position.position_cost_long)
  return _internal_position_cost_long();
}
inline void Position::_internal_set_position_cost_long(float value) {
  
  position_cost_long_ = value;
}
inline void Position::set_position_cost_long(float value) {
  _internal_set_position_cost_long(value);
  // @@protoc_insertion_point(field_set:Position.position_cost_long)
}

// float position_cost_short = 29;
inline void Position::clear_position_cost_short() {
  position_cost_short_ = 0;
}
inline float Position::_internal_position_cost_short() const {
  return position_cost_short_;
}
inline float Position::position_cost_short() const {
  // @@protoc_insertion_point(field_get:Position.position_cost_short)
  return _internal_position_cost_short();
}
inline void Position::_internal_set_position_cost_short(float value) {
  
  position_cost_short_ = value;
}
inline void Position::set_position_cost_short(float value) {
  _internal_set_position_cost_short(value);
  // @@protoc_insertion_point(field_set:Position.position_cost_short)
}

// float last_price = 30;
inline void Position::clear_last_price() {
  last_price_ = 0;
}
inline float Position::_internal_last_price() const {
  return last_price_;
}
inline float Position::last_price() const {
  // @@protoc_insertion_point(field_get:Position.last_price)
  return _internal_last_price();
}
inline void Position::_internal_set_last_price(float value) {
  
  last_price_ = value;
}
inline void Position::set_last_price(float value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:Position.last_price)
}

// float float_profit_long = 31;
inline void Position::clear_float_profit_long() {
  float_profit_long_ = 0;
}
inline float Position::_internal_float_profit_long() const {
  return float_profit_long_;
}
inline float Position::float_profit_long() const {
  // @@protoc_insertion_point(field_get:Position.float_profit_long)
  return _internal_float_profit_long();
}
inline void Position::_internal_set_float_profit_long(float value) {
  
  float_profit_long_ = value;
}
inline void Position::set_float_profit_long(float value) {
  _internal_set_float_profit_long(value);
  // @@protoc_insertion_point(field_set:Position.float_profit_long)
}

// float float_profit_short = 32;
inline void Position::clear_float_profit_short() {
  float_profit_short_ = 0;
}
inline float Position::_internal_float_profit_short() const {
  return float_profit_short_;
}
inline float Position::float_profit_short() const {
  // @@protoc_insertion_point(field_get:Position.float_profit_short)
  return _internal_float_profit_short();
}
inline void Position::_internal_set_float_profit_short(float value) {
  
  float_profit_short_ = value;
}
inline void Position::set_float_profit_short(float value) {
  _internal_set_float_profit_short(value);
  // @@protoc_insertion_point(field_set:Position.float_profit_short)
}

// float float_profit = 33;
inline void Position::clear_float_profit() {
  float_profit_ = 0;
}
inline float Position::_internal_float_profit() const {
  return float_profit_;
}
inline float Position::float_profit() const {
  // @@protoc_insertion_point(field_get:Position.float_profit)
  return _internal_float_profit();
}
inline void Position::_internal_set_float_profit(float value) {
  
  float_profit_ = value;
}
inline void Position::set_float_profit(float value) {
  _internal_set_float_profit(value);
  // @@protoc_insertion_point(field_set:Position.float_profit)
}

// float position_profit_long = 34;
inline void Position::clear_position_profit_long() {
  position_profit_long_ = 0;
}
inline float Position::_internal_position_profit_long() const {
  return position_profit_long_;
}
inline float Position::position_profit_long() const {
  // @@protoc_insertion_point(field_get:Position.position_profit_long)
  return _internal_position_profit_long();
}
inline void Position::_internal_set_position_profit_long(float value) {
  
  position_profit_long_ = value;
}
inline void Position::set_position_profit_long(float value) {
  _internal_set_position_profit_long(value);
  // @@protoc_insertion_point(field_set:Position.position_profit_long)
}

// float position_profit_short = 35;
inline void Position::clear_position_profit_short() {
  position_profit_short_ = 0;
}
inline float Position::_internal_position_profit_short() const {
  return position_profit_short_;
}
inline float Position::position_profit_short() const {
  // @@protoc_insertion_point(field_get:Position.position_profit_short)
  return _internal_position_profit_short();
}
inline void Position::_internal_set_position_profit_short(float value) {
  
  position_profit_short_ = value;
}
inline void Position::set_position_profit_short(float value) {
  _internal_set_position_profit_short(value);
  // @@protoc_insertion_point(field_set:Position.position_profit_short)
}

// float position_profit = 36;
inline void Position::clear_position_profit() {
  position_profit_ = 0;
}
inline float Position::_internal_position_profit() const {
  return position_profit_;
}
inline float Position::position_profit() const {
  // @@protoc_insertion_point(field_get:Position.position_profit)
  return _internal_position_profit();
}
inline void Position::_internal_set_position_profit(float value) {
  
  position_profit_ = value;
}
inline void Position::set_position_profit(float value) {
  _internal_set_position_profit(value);
  // @@protoc_insertion_point(field_set:Position.position_profit)
}

// float margin_long = 37;
inline void Position::clear_margin_long() {
  margin_long_ = 0;
}
inline float Position::_internal_margin_long() const {
  return margin_long_;
}
inline float Position::margin_long() const {
  // @@protoc_insertion_point(field_get:Position.margin_long)
  return _internal_margin_long();
}
inline void Position::_internal_set_margin_long(float value) {
  
  margin_long_ = value;
}
inline void Position::set_margin_long(float value) {
  _internal_set_margin_long(value);
  // @@protoc_insertion_point(field_set:Position.margin_long)
}

// float margin_short = 38;
inline void Position::clear_margin_short() {
  margin_short_ = 0;
}
inline float Position::_internal_margin_short() const {
  return margin_short_;
}
inline float Position::margin_short() const {
  // @@protoc_insertion_point(field_get:Position.margin_short)
  return _internal_margin_short();
}
inline void Position::_internal_set_margin_short(float value) {
  
  margin_short_ = value;
}
inline void Position::set_margin_short(float value) {
  _internal_set_margin_short(value);
  // @@protoc_insertion_point(field_set:Position.margin_short)
}

// float margin = 39;
inline void Position::clear_margin() {
  margin_ = 0;
}
inline float Position::_internal_margin() const {
  return margin_;
}
inline float Position::margin() const {
  // @@protoc_insertion_point(field_get:Position.margin)
  return _internal_margin();
}
inline void Position::_internal_set_margin(float value) {
  
  margin_ = value;
}
inline void Position::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:Position.margin)
}

// -------------------------------------------------------------------

// Transfer

// int64 datetime = 1;
inline void Transfer::clear_datetime() {
  datetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transfer::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transfer::datetime() const {
  // @@protoc_insertion_point(field_get:Transfer.datetime)
  return _internal_datetime();
}
inline void Transfer::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  datetime_ = value;
}
inline void Transfer::set_datetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:Transfer.datetime)
}

// string currency = 2;
inline void Transfer::clear_currency() {
  currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::currency() const {
  // @@protoc_insertion_point(field_get:Transfer.currency)
  return _internal_currency();
}
inline void Transfer::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Transfer.currency)
}
inline std::string* Transfer::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Transfer.currency)
  return _internal_mutable_currency();
}
inline const std::string& Transfer::_internal_currency() const {
  return currency_.Get();
}
inline void Transfer::_internal_set_currency(const std::string& value) {
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_currency(std::string&& value) {
  
  currency_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Transfer.currency)
}
inline void Transfer::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Transfer.currency)
}
inline void Transfer::set_currency(const char* value,
    size_t size) {
  
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Transfer.currency)
}
inline std::string* Transfer::_internal_mutable_currency() {
  
  return currency_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_currency() {
  // @@protoc_insertion_point(field_release:Transfer.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Transfer.currency)
}
inline std::string* Transfer::unsafe_arena_release_currency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Transfer.currency)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currency_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_currency(
    std::string* currency) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currency, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transfer.currency)
}

// float amount = 3;
inline void Transfer::clear_amount() {
  amount_ = 0;
}
inline float Transfer::_internal_amount() const {
  return amount_;
}
inline float Transfer::amount() const {
  // @@protoc_insertion_point(field_get:Transfer.amount)
  return _internal_amount();
}
inline void Transfer::_internal_set_amount(float value) {
  
  amount_ = value;
}
inline void Transfer::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Transfer.amount)
}

// int32 error_id = 4;
inline void Transfer::clear_error_id() {
  error_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transfer::_internal_error_id() const {
  return error_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transfer::error_id() const {
  // @@protoc_insertion_point(field_get:Transfer.error_id)
  return _internal_error_id();
}
inline void Transfer::_internal_set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_id_ = value;
}
inline void Transfer::set_error_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_id(value);
  // @@protoc_insertion_point(field_set:Transfer.error_id)
}

// string error_msg = 5;
inline void Transfer::clear_error_msg() {
  error_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::error_msg() const {
  // @@protoc_insertion_point(field_get:Transfer.error_msg)
  return _internal_error_msg();
}
inline void Transfer::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:Transfer.error_msg)
}
inline std::string* Transfer::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:Transfer.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& Transfer::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void Transfer::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Transfer.error_msg)
}
inline void Transfer::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Transfer.error_msg)
}
inline void Transfer::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Transfer.error_msg)
}
inline std::string* Transfer::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_error_msg() {
  // @@protoc_insertion_point(field_release:Transfer.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Transfer.error_msg)
}
inline std::string* Transfer::unsafe_arena_release_error_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Transfer.error_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_error_msg(
    std::string* error_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transfer.error_msg)
}

// -------------------------------------------------------------------

// Bank

// string id = 1;
inline void Bank::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bank::id() const {
  // @@protoc_insertion_point(field_get:Bank.id)
  return _internal_id();
}
inline void Bank::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Bank.id)
}
inline std::string* Bank::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Bank.id)
  return _internal_mutable_id();
}
inline const std::string& Bank::_internal_id() const {
  return id_.Get();
}
inline void Bank::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bank::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Bank.id)
}
inline void Bank::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Bank.id)
}
inline void Bank::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Bank.id)
}
inline std::string* Bank::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bank::release_id() {
  // @@protoc_insertion_point(field_release:Bank.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bank::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Bank.id)
}
inline std::string* Bank::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Bank.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bank::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bank.id)
}

// string name = 2;
inline void Bank::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bank::name() const {
  // @@protoc_insertion_point(field_get:Bank.name)
  return _internal_name();
}
inline void Bank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Bank.name)
}
inline std::string* Bank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Bank.name)
  return _internal_mutable_name();
}
inline const std::string& Bank::_internal_name() const {
  return name_.Get();
}
inline void Bank::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bank::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Bank.name)
}
inline void Bank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Bank.name)
}
inline void Bank::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Bank.name)
}
inline std::string* Bank::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bank::release_name() {
  // @@protoc_insertion_point(field_release:Bank.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Bank.name)
}
inline std::string* Bank::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Bank.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bank::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bank.name)
}

// string bank_account = 3;
inline void Bank::clear_bank_account() {
  bank_account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bank::bank_account() const {
  // @@protoc_insertion_point(field_get:Bank.bank_account)
  return _internal_bank_account();
}
inline void Bank::set_bank_account(const std::string& value) {
  _internal_set_bank_account(value);
  // @@protoc_insertion_point(field_set:Bank.bank_account)
}
inline std::string* Bank::mutable_bank_account() {
  // @@protoc_insertion_point(field_mutable:Bank.bank_account)
  return _internal_mutable_bank_account();
}
inline const std::string& Bank::_internal_bank_account() const {
  return bank_account_.Get();
}
inline void Bank::_internal_set_bank_account(const std::string& value) {
  
  bank_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bank::set_bank_account(std::string&& value) {
  
  bank_account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Bank.bank_account)
}
inline void Bank::set_bank_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Bank.bank_account)
}
inline void Bank::set_bank_account(const char* value,
    size_t size) {
  
  bank_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Bank.bank_account)
}
inline std::string* Bank::_internal_mutable_bank_account() {
  
  return bank_account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bank::release_bank_account() {
  // @@protoc_insertion_point(field_release:Bank.bank_account)
  return bank_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bank::set_allocated_bank_account(std::string* bank_account) {
  if (bank_account != nullptr) {
    
  } else {
    
  }
  bank_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Bank.bank_account)
}
inline std::string* Bank::unsafe_arena_release_bank_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Bank.bank_account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bank_account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bank::unsafe_arena_set_allocated_bank_account(
    std::string* bank_account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bank_account != nullptr) {
    
  } else {
    
  }
  bank_account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bank_account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bank.bank_account)
}

// float fetch_amount = 4;
inline void Bank::clear_fetch_amount() {
  fetch_amount_ = 0;
}
inline float Bank::_internal_fetch_amount() const {
  return fetch_amount_;
}
inline float Bank::fetch_amount() const {
  // @@protoc_insertion_point(field_get:Bank.fetch_amount)
  return _internal_fetch_amount();
}
inline void Bank::_internal_set_fetch_amount(float value) {
  
  fetch_amount_ = value;
}
inline void Bank::set_fetch_amount(float value) {
  _internal_set_fetch_amount(value);
  // @@protoc_insertion_point(field_set:Bank.fetch_amount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QIFI

// string databaseip = 1;
inline void QIFI::clear_databaseip() {
  databaseip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::databaseip() const {
  // @@protoc_insertion_point(field_get:QIFI.databaseip)
  return _internal_databaseip();
}
inline void QIFI::set_databaseip(const std::string& value) {
  _internal_set_databaseip(value);
  // @@protoc_insertion_point(field_set:QIFI.databaseip)
}
inline std::string* QIFI::mutable_databaseip() {
  // @@protoc_insertion_point(field_mutable:QIFI.databaseip)
  return _internal_mutable_databaseip();
}
inline const std::string& QIFI::_internal_databaseip() const {
  return databaseip_.Get();
}
inline void QIFI::_internal_set_databaseip(const std::string& value) {
  
  databaseip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_databaseip(std::string&& value) {
  
  databaseip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.databaseip)
}
inline void QIFI::set_databaseip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  databaseip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.databaseip)
}
inline void QIFI::set_databaseip(const char* value,
    size_t size) {
  
  databaseip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.databaseip)
}
inline std::string* QIFI::_internal_mutable_databaseip() {
  
  return databaseip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_databaseip() {
  // @@protoc_insertion_point(field_release:QIFI.databaseip)
  return databaseip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_databaseip(std::string* databaseip) {
  if (databaseip != nullptr) {
    
  } else {
    
  }
  databaseip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), databaseip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.databaseip)
}
inline std::string* QIFI::unsafe_arena_release_databaseip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.databaseip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return databaseip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_databaseip(
    std::string* databaseip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (databaseip != nullptr) {
    
  } else {
    
  }
  databaseip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      databaseip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.databaseip)
}

// string account_cookie = 2;
inline void QIFI::clear_account_cookie() {
  account_cookie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::account_cookie() const {
  // @@protoc_insertion_point(field_get:QIFI.account_cookie)
  return _internal_account_cookie();
}
inline void QIFI::set_account_cookie(const std::string& value) {
  _internal_set_account_cookie(value);
  // @@protoc_insertion_point(field_set:QIFI.account_cookie)
}
inline std::string* QIFI::mutable_account_cookie() {
  // @@protoc_insertion_point(field_mutable:QIFI.account_cookie)
  return _internal_mutable_account_cookie();
}
inline const std::string& QIFI::_internal_account_cookie() const {
  return account_cookie_.Get();
}
inline void QIFI::_internal_set_account_cookie(const std::string& value) {
  
  account_cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_account_cookie(std::string&& value) {
  
  account_cookie_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.account_cookie)
}
inline void QIFI::set_account_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.account_cookie)
}
inline void QIFI::set_account_cookie(const char* value,
    size_t size) {
  
  account_cookie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.account_cookie)
}
inline std::string* QIFI::_internal_mutable_account_cookie() {
  
  return account_cookie_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_account_cookie() {
  // @@protoc_insertion_point(field_release:QIFI.account_cookie)
  return account_cookie_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_account_cookie(std::string* account_cookie) {
  if (account_cookie != nullptr) {
    
  } else {
    
  }
  account_cookie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_cookie,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.account_cookie)
}
inline std::string* QIFI::unsafe_arena_release_account_cookie() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.account_cookie)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_cookie_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_account_cookie(
    std::string* account_cookie) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_cookie != nullptr) {
    
  } else {
    
  }
  account_cookie_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_cookie, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.account_cookie)
}

// string password = 3;
inline void QIFI::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::password() const {
  // @@protoc_insertion_point(field_get:QIFI.password)
  return _internal_password();
}
inline void QIFI::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:QIFI.password)
}
inline std::string* QIFI::mutable_password() {
  // @@protoc_insertion_point(field_mutable:QIFI.password)
  return _internal_mutable_password();
}
inline const std::string& QIFI::_internal_password() const {
  return password_.Get();
}
inline void QIFI::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.password)
}
inline void QIFI::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.password)
}
inline void QIFI::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.password)
}
inline std::string* QIFI::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_password() {
  // @@protoc_insertion_point(field_release:QIFI.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.password)
}
inline std::string* QIFI::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.password)
}

// string portfolio = 4;
inline void QIFI::clear_portfolio() {
  portfolio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::portfolio() const {
  // @@protoc_insertion_point(field_get:QIFI.portfolio)
  return _internal_portfolio();
}
inline void QIFI::set_portfolio(const std::string& value) {
  _internal_set_portfolio(value);
  // @@protoc_insertion_point(field_set:QIFI.portfolio)
}
inline std::string* QIFI::mutable_portfolio() {
  // @@protoc_insertion_point(field_mutable:QIFI.portfolio)
  return _internal_mutable_portfolio();
}
inline const std::string& QIFI::_internal_portfolio() const {
  return portfolio_.Get();
}
inline void QIFI::_internal_set_portfolio(const std::string& value) {
  
  portfolio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_portfolio(std::string&& value) {
  
  portfolio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.portfolio)
}
inline void QIFI::set_portfolio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  portfolio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.portfolio)
}
inline void QIFI::set_portfolio(const char* value,
    size_t size) {
  
  portfolio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.portfolio)
}
inline std::string* QIFI::_internal_mutable_portfolio() {
  
  return portfolio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_portfolio() {
  // @@protoc_insertion_point(field_release:QIFI.portfolio)
  return portfolio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_portfolio(std::string* portfolio) {
  if (portfolio != nullptr) {
    
  } else {
    
  }
  portfolio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), portfolio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.portfolio)
}
inline std::string* QIFI::unsafe_arena_release_portfolio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.portfolio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return portfolio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_portfolio(
    std::string* portfolio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (portfolio != nullptr) {
    
  } else {
    
  }
  portfolio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      portfolio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.portfolio)
}

// string broker_name = 5;
inline void QIFI::clear_broker_name() {
  broker_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::broker_name() const {
  // @@protoc_insertion_point(field_get:QIFI.broker_name)
  return _internal_broker_name();
}
inline void QIFI::set_broker_name(const std::string& value) {
  _internal_set_broker_name(value);
  // @@protoc_insertion_point(field_set:QIFI.broker_name)
}
inline std::string* QIFI::mutable_broker_name() {
  // @@protoc_insertion_point(field_mutable:QIFI.broker_name)
  return _internal_mutable_broker_name();
}
inline const std::string& QIFI::_internal_broker_name() const {
  return broker_name_.Get();
}
inline void QIFI::_internal_set_broker_name(const std::string& value) {
  
  broker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_broker_name(std::string&& value) {
  
  broker_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.broker_name)
}
inline void QIFI::set_broker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.broker_name)
}
inline void QIFI::set_broker_name(const char* value,
    size_t size) {
  
  broker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.broker_name)
}
inline std::string* QIFI::_internal_mutable_broker_name() {
  
  return broker_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_broker_name() {
  // @@protoc_insertion_point(field_release:QIFI.broker_name)
  return broker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_broker_name(std::string* broker_name) {
  if (broker_name != nullptr) {
    
  } else {
    
  }
  broker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.broker_name)
}
inline std::string* QIFI::unsafe_arena_release_broker_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.broker_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return broker_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_broker_name(
    std::string* broker_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (broker_name != nullptr) {
    
  } else {
    
  }
  broker_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      broker_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.broker_name)
}

// string capital_password = 6;
inline void QIFI::clear_capital_password() {
  capital_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::capital_password() const {
  // @@protoc_insertion_point(field_get:QIFI.capital_password)
  return _internal_capital_password();
}
inline void QIFI::set_capital_password(const std::string& value) {
  _internal_set_capital_password(value);
  // @@protoc_insertion_point(field_set:QIFI.capital_password)
}
inline std::string* QIFI::mutable_capital_password() {
  // @@protoc_insertion_point(field_mutable:QIFI.capital_password)
  return _internal_mutable_capital_password();
}
inline const std::string& QIFI::_internal_capital_password() const {
  return capital_password_.Get();
}
inline void QIFI::_internal_set_capital_password(const std::string& value) {
  
  capital_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_capital_password(std::string&& value) {
  
  capital_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.capital_password)
}
inline void QIFI::set_capital_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  capital_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.capital_password)
}
inline void QIFI::set_capital_password(const char* value,
    size_t size) {
  
  capital_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.capital_password)
}
inline std::string* QIFI::_internal_mutable_capital_password() {
  
  return capital_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_capital_password() {
  // @@protoc_insertion_point(field_release:QIFI.capital_password)
  return capital_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_capital_password(std::string* capital_password) {
  if (capital_password != nullptr) {
    
  } else {
    
  }
  capital_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), capital_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.capital_password)
}
inline std::string* QIFI::unsafe_arena_release_capital_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.capital_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return capital_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_capital_password(
    std::string* capital_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (capital_password != nullptr) {
    
  } else {
    
  }
  capital_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      capital_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.capital_password)
}

// string bank_password = 7;
inline void QIFI::clear_bank_password() {
  bank_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::bank_password() const {
  // @@protoc_insertion_point(field_get:QIFI.bank_password)
  return _internal_bank_password();
}
inline void QIFI::set_bank_password(const std::string& value) {
  _internal_set_bank_password(value);
  // @@protoc_insertion_point(field_set:QIFI.bank_password)
}
inline std::string* QIFI::mutable_bank_password() {
  // @@protoc_insertion_point(field_mutable:QIFI.bank_password)
  return _internal_mutable_bank_password();
}
inline const std::string& QIFI::_internal_bank_password() const {
  return bank_password_.Get();
}
inline void QIFI::_internal_set_bank_password(const std::string& value) {
  
  bank_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_bank_password(std::string&& value) {
  
  bank_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.bank_password)
}
inline void QIFI::set_bank_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.bank_password)
}
inline void QIFI::set_bank_password(const char* value,
    size_t size) {
  
  bank_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.bank_password)
}
inline std::string* QIFI::_internal_mutable_bank_password() {
  
  return bank_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_bank_password() {
  // @@protoc_insertion_point(field_release:QIFI.bank_password)
  return bank_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_bank_password(std::string* bank_password) {
  if (bank_password != nullptr) {
    
  } else {
    
  }
  bank_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bank_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.bank_password)
}
inline std::string* QIFI::unsafe_arena_release_bank_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.bank_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bank_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_bank_password(
    std::string* bank_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bank_password != nullptr) {
    
  } else {
    
  }
  bank_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bank_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.bank_password)
}

// string bankid = 8;
inline void QIFI::clear_bankid() {
  bankid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::bankid() const {
  // @@protoc_insertion_point(field_get:QIFI.bankid)
  return _internal_bankid();
}
inline void QIFI::set_bankid(const std::string& value) {
  _internal_set_bankid(value);
  // @@protoc_insertion_point(field_set:QIFI.bankid)
}
inline std::string* QIFI::mutable_bankid() {
  // @@protoc_insertion_point(field_mutable:QIFI.bankid)
  return _internal_mutable_bankid();
}
inline const std::string& QIFI::_internal_bankid() const {
  return bankid_.Get();
}
inline void QIFI::_internal_set_bankid(const std::string& value) {
  
  bankid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_bankid(std::string&& value) {
  
  bankid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.bankid)
}
inline void QIFI::set_bankid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bankid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.bankid)
}
inline void QIFI::set_bankid(const char* value,
    size_t size) {
  
  bankid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.bankid)
}
inline std::string* QIFI::_internal_mutable_bankid() {
  
  return bankid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_bankid() {
  // @@protoc_insertion_point(field_release:QIFI.bankid)
  return bankid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_bankid(std::string* bankid) {
  if (bankid != nullptr) {
    
  } else {
    
  }
  bankid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bankid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.bankid)
}
inline std::string* QIFI::unsafe_arena_release_bankid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.bankid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bankid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_bankid(
    std::string* bankid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bankid != nullptr) {
    
  } else {
    
  }
  bankid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bankid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.bankid)
}

// string investor_name = 9;
inline void QIFI::clear_investor_name() {
  investor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::investor_name() const {
  // @@protoc_insertion_point(field_get:QIFI.investor_name)
  return _internal_investor_name();
}
inline void QIFI::set_investor_name(const std::string& value) {
  _internal_set_investor_name(value);
  // @@protoc_insertion_point(field_set:QIFI.investor_name)
}
inline std::string* QIFI::mutable_investor_name() {
  // @@protoc_insertion_point(field_mutable:QIFI.investor_name)
  return _internal_mutable_investor_name();
}
inline const std::string& QIFI::_internal_investor_name() const {
  return investor_name_.Get();
}
inline void QIFI::_internal_set_investor_name(const std::string& value) {
  
  investor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_investor_name(std::string&& value) {
  
  investor_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.investor_name)
}
inline void QIFI::set_investor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.investor_name)
}
inline void QIFI::set_investor_name(const char* value,
    size_t size) {
  
  investor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.investor_name)
}
inline std::string* QIFI::_internal_mutable_investor_name() {
  
  return investor_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_investor_name() {
  // @@protoc_insertion_point(field_release:QIFI.investor_name)
  return investor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_investor_name(std::string* investor_name) {
  if (investor_name != nullptr) {
    
  } else {
    
  }
  investor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.investor_name)
}
inline std::string* QIFI::unsafe_arena_release_investor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.investor_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return investor_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_investor_name(
    std::string* investor_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (investor_name != nullptr) {
    
  } else {
    
  }
  investor_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      investor_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.investor_name)
}

// float money = 10;
inline void QIFI::clear_money() {
  money_ = 0;
}
inline float QIFI::_internal_money() const {
  return money_;
}
inline float QIFI::money() const {
  // @@protoc_insertion_point(field_get:QIFI.money)
  return _internal_money();
}
inline void QIFI::_internal_set_money(float value) {
  
  money_ = value;
}
inline void QIFI::set_money(float value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:QIFI.money)
}

// string pub_host = 11;
inline void QIFI::clear_pub_host() {
  pub_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::pub_host() const {
  // @@protoc_insertion_point(field_get:QIFI.pub_host)
  return _internal_pub_host();
}
inline void QIFI::set_pub_host(const std::string& value) {
  _internal_set_pub_host(value);
  // @@protoc_insertion_point(field_set:QIFI.pub_host)
}
inline std::string* QIFI::mutable_pub_host() {
  // @@protoc_insertion_point(field_mutable:QIFI.pub_host)
  return _internal_mutable_pub_host();
}
inline const std::string& QIFI::_internal_pub_host() const {
  return pub_host_.Get();
}
inline void QIFI::_internal_set_pub_host(const std::string& value) {
  
  pub_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_pub_host(std::string&& value) {
  
  pub_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.pub_host)
}
inline void QIFI::set_pub_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.pub_host)
}
inline void QIFI::set_pub_host(const char* value,
    size_t size) {
  
  pub_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.pub_host)
}
inline std::string* QIFI::_internal_mutable_pub_host() {
  
  return pub_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_pub_host() {
  // @@protoc_insertion_point(field_release:QIFI.pub_host)
  return pub_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_pub_host(std::string* pub_host) {
  if (pub_host != nullptr) {
    
  } else {
    
  }
  pub_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.pub_host)
}
inline std::string* QIFI::unsafe_arena_release_pub_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.pub_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pub_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_pub_host(
    std::string* pub_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pub_host != nullptr) {
    
  } else {
    
  }
  pub_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pub_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.pub_host)
}

// map<string, string> settlement = 12;
inline int QIFI::_internal_settlement_size() const {
  return settlement_.size();
}
inline int QIFI::settlement_size() const {
  return _internal_settlement_size();
}
inline void QIFI::clear_settlement() {
  settlement_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QIFI::_internal_settlement() const {
  return settlement_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QIFI::settlement() const {
  // @@protoc_insertion_point(field_map:QIFI.settlement)
  return _internal_settlement();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QIFI::_internal_mutable_settlement() {
  return settlement_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QIFI::mutable_settlement() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.settlement)
  return _internal_mutable_settlement();
}

// string taskid = 13;
inline void QIFI::clear_taskid() {
  taskid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::taskid() const {
  // @@protoc_insertion_point(field_get:QIFI.taskid)
  return _internal_taskid();
}
inline void QIFI::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:QIFI.taskid)
}
inline std::string* QIFI::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:QIFI.taskid)
  return _internal_mutable_taskid();
}
inline const std::string& QIFI::_internal_taskid() const {
  return taskid_.Get();
}
inline void QIFI::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_taskid(std::string&& value) {
  
  taskid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.taskid)
}
inline void QIFI::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.taskid)
}
inline void QIFI::set_taskid(const char* value,
    size_t size) {
  
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.taskid)
}
inline std::string* QIFI::_internal_mutable_taskid() {
  
  return taskid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_taskid() {
  // @@protoc_insertion_point(field_release:QIFI.taskid)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.taskid)
}
inline std::string* QIFI::unsafe_arena_release_taskid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.taskid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return taskid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_taskid(
    std::string* taskid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      taskid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.taskid)
}

// string trade_host = 14;
inline void QIFI::clear_trade_host() {
  trade_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::trade_host() const {
  // @@protoc_insertion_point(field_get:QIFI.trade_host)
  return _internal_trade_host();
}
inline void QIFI::set_trade_host(const std::string& value) {
  _internal_set_trade_host(value);
  // @@protoc_insertion_point(field_set:QIFI.trade_host)
}
inline std::string* QIFI::mutable_trade_host() {
  // @@protoc_insertion_point(field_mutable:QIFI.trade_host)
  return _internal_mutable_trade_host();
}
inline const std::string& QIFI::_internal_trade_host() const {
  return trade_host_.Get();
}
inline void QIFI::_internal_set_trade_host(const std::string& value) {
  
  trade_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_trade_host(std::string&& value) {
  
  trade_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.trade_host)
}
inline void QIFI::set_trade_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.trade_host)
}
inline void QIFI::set_trade_host(const char* value,
    size_t size) {
  
  trade_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.trade_host)
}
inline std::string* QIFI::_internal_mutable_trade_host() {
  
  return trade_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_trade_host() {
  // @@protoc_insertion_point(field_release:QIFI.trade_host)
  return trade_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_trade_host(std::string* trade_host) {
  if (trade_host != nullptr) {
    
  } else {
    
  }
  trade_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.trade_host)
}
inline std::string* QIFI::unsafe_arena_release_trade_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.trade_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trade_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_trade_host(
    std::string* trade_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trade_host != nullptr) {
    
  } else {
    
  }
  trade_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trade_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.trade_host)
}

// string updatetime = 15;
inline void QIFI::clear_updatetime() {
  updatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::updatetime() const {
  // @@protoc_insertion_point(field_get:QIFI.updatetime)
  return _internal_updatetime();
}
inline void QIFI::set_updatetime(const std::string& value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:QIFI.updatetime)
}
inline std::string* QIFI::mutable_updatetime() {
  // @@protoc_insertion_point(field_mutable:QIFI.updatetime)
  return _internal_mutable_updatetime();
}
inline const std::string& QIFI::_internal_updatetime() const {
  return updatetime_.Get();
}
inline void QIFI::_internal_set_updatetime(const std::string& value) {
  
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_updatetime(std::string&& value) {
  
  updatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.updatetime)
}
inline void QIFI::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.updatetime)
}
inline void QIFI::set_updatetime(const char* value,
    size_t size) {
  
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.updatetime)
}
inline std::string* QIFI::_internal_mutable_updatetime() {
  
  return updatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_updatetime() {
  // @@protoc_insertion_point(field_release:QIFI.updatetime)
  return updatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_updatetime(std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  updatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.updatetime)
}
inline std::string* QIFI::unsafe_arena_release_updatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.updatetime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return updatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_updatetime(
    std::string* updatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updatetime != nullptr) {
    
  } else {
    
  }
  updatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.updatetime)
}

// string wsuri = 16;
inline void QIFI::clear_wsuri() {
  wsuri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::wsuri() const {
  // @@protoc_insertion_point(field_get:QIFI.wsuri)
  return _internal_wsuri();
}
inline void QIFI::set_wsuri(const std::string& value) {
  _internal_set_wsuri(value);
  // @@protoc_insertion_point(field_set:QIFI.wsuri)
}
inline std::string* QIFI::mutable_wsuri() {
  // @@protoc_insertion_point(field_mutable:QIFI.wsuri)
  return _internal_mutable_wsuri();
}
inline const std::string& QIFI::_internal_wsuri() const {
  return wsuri_.Get();
}
inline void QIFI::_internal_set_wsuri(const std::string& value) {
  
  wsuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_wsuri(std::string&& value) {
  
  wsuri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.wsuri)
}
inline void QIFI::set_wsuri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wsuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.wsuri)
}
inline void QIFI::set_wsuri(const char* value,
    size_t size) {
  
  wsuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.wsuri)
}
inline std::string* QIFI::_internal_mutable_wsuri() {
  
  return wsuri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_wsuri() {
  // @@protoc_insertion_point(field_release:QIFI.wsuri)
  return wsuri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_wsuri(std::string* wsuri) {
  if (wsuri != nullptr) {
    
  } else {
    
  }
  wsuri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wsuri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.wsuri)
}
inline std::string* QIFI::unsafe_arena_release_wsuri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.wsuri)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wsuri_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_wsuri(
    std::string* wsuri) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wsuri != nullptr) {
    
  } else {
    
  }
  wsuri_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wsuri, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.wsuri)
}

// string bankname = 17;
inline void QIFI::clear_bankname() {
  bankname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::bankname() const {
  // @@protoc_insertion_point(field_get:QIFI.bankname)
  return _internal_bankname();
}
inline void QIFI::set_bankname(const std::string& value) {
  _internal_set_bankname(value);
  // @@protoc_insertion_point(field_set:QIFI.bankname)
}
inline std::string* QIFI::mutable_bankname() {
  // @@protoc_insertion_point(field_mutable:QIFI.bankname)
  return _internal_mutable_bankname();
}
inline const std::string& QIFI::_internal_bankname() const {
  return bankname_.Get();
}
inline void QIFI::_internal_set_bankname(const std::string& value) {
  
  bankname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_bankname(std::string&& value) {
  
  bankname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.bankname)
}
inline void QIFI::set_bankname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bankname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.bankname)
}
inline void QIFI::set_bankname(const char* value,
    size_t size) {
  
  bankname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.bankname)
}
inline std::string* QIFI::_internal_mutable_bankname() {
  
  return bankname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_bankname() {
  // @@protoc_insertion_point(field_release:QIFI.bankname)
  return bankname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_bankname(std::string* bankname) {
  if (bankname != nullptr) {
    
  } else {
    
  }
  bankname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bankname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.bankname)
}
inline std::string* QIFI::unsafe_arena_release_bankname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.bankname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bankname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_bankname(
    std::string* bankname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bankname != nullptr) {
    
  } else {
    
  }
  bankname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bankname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.bankname)
}

// string trading_day = 18;
inline void QIFI::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QIFI::trading_day() const {
  // @@protoc_insertion_point(field_get:QIFI.trading_day)
  return _internal_trading_day();
}
inline void QIFI::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:QIFI.trading_day)
}
inline std::string* QIFI::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:QIFI.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& QIFI::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void QIFI::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QIFI::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QIFI.trading_day)
}
inline void QIFI::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QIFI.trading_day)
}
inline void QIFI::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QIFI.trading_day)
}
inline std::string* QIFI::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QIFI::release_trading_day() {
  // @@protoc_insertion_point(field_release:QIFI.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QIFI::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QIFI.trading_day)
}
inline std::string* QIFI::unsafe_arena_release_trading_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:QIFI.trading_day)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trading_day_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QIFI::unsafe_arena_set_allocated_trading_day(
    std::string* trading_day) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trading_day, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.trading_day)
}

// int32 status = 19;
inline void QIFI::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QIFI::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QIFI::status() const {
  // @@protoc_insertion_point(field_get:QIFI.status)
  return _internal_status();
}
inline void QIFI::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void QIFI::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:QIFI.status)
}

// .Account accounts = 20;
inline bool QIFI::_internal_has_accounts() const {
  return this != internal_default_instance() && accounts_ != nullptr;
}
inline bool QIFI::has_accounts() const {
  return _internal_has_accounts();
}
inline void QIFI::clear_accounts() {
  if (GetArena() == nullptr && accounts_ != nullptr) {
    delete accounts_;
  }
  accounts_ = nullptr;
}
inline const ::Account& QIFI::_internal_accounts() const {
  const ::Account* p = accounts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Account*>(
      &::_Account_default_instance_);
}
inline const ::Account& QIFI::accounts() const {
  // @@protoc_insertion_point(field_get:QIFI.accounts)
  return _internal_accounts();
}
inline void QIFI::unsafe_arena_set_allocated_accounts(
    ::Account* accounts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accounts_);
  }
  accounts_ = accounts;
  if (accounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QIFI.accounts)
}
inline ::Account* QIFI::release_accounts() {
  auto temp = unsafe_arena_release_accounts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Account* QIFI::unsafe_arena_release_accounts() {
  // @@protoc_insertion_point(field_release:QIFI.accounts)
  
  ::Account* temp = accounts_;
  accounts_ = nullptr;
  return temp;
}
inline ::Account* QIFI::_internal_mutable_accounts() {
  
  if (accounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::Account>(GetArena());
    accounts_ = p;
  }
  return accounts_;
}
inline ::Account* QIFI::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable:QIFI.accounts)
  return _internal_mutable_accounts();
}
inline void QIFI::set_allocated_accounts(::Account* accounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accounts_;
  }
  if (accounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accounts);
    if (message_arena != submessage_arena) {
      accounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accounts, submessage_arena);
    }
    
  } else {
    
  }
  accounts_ = accounts;
  // @@protoc_insertion_point(field_set_allocated:QIFI.accounts)
}

// map<string, .Bank> banks = 21;
inline int QIFI::_internal_banks_size() const {
  return banks_.size();
}
inline int QIFI::banks_size() const {
  return _internal_banks_size();
}
inline void QIFI::clear_banks() {
  banks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >&
QIFI::_internal_banks() const {
  return banks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >&
QIFI::banks() const {
  // @@protoc_insertion_point(field_map:QIFI.banks)
  return _internal_banks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >*
QIFI::_internal_mutable_banks() {
  return banks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Bank >*
QIFI::mutable_banks() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.banks)
  return _internal_mutable_banks();
}

// map<string, string> event = 22;
inline int QIFI::_internal_event_size() const {
  return event_.size();
}
inline int QIFI::event_size() const {
  return _internal_event_size();
}
inline void QIFI::clear_event() {
  event_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QIFI::_internal_event() const {
  return event_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QIFI::event() const {
  // @@protoc_insertion_point(field_map:QIFI.event)
  return _internal_event();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QIFI::_internal_mutable_event() {
  return event_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QIFI::mutable_event() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.event)
  return _internal_mutable_event();
}

// map<string, .Order> orders = 23;
inline int QIFI::_internal_orders_size() const {
  return orders_.size();
}
inline int QIFI::orders_size() const {
  return _internal_orders_size();
}
inline void QIFI::clear_orders() {
  orders_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >&
QIFI::_internal_orders() const {
  return orders_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >&
QIFI::orders() const {
  // @@protoc_insertion_point(field_map:QIFI.orders)
  return _internal_orders();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >*
QIFI::_internal_mutable_orders() {
  return orders_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Order >*
QIFI::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.orders)
  return _internal_mutable_orders();
}

// map<string, .Position> positons = 24;
inline int QIFI::_internal_positons_size() const {
  return positons_.size();
}
inline int QIFI::positons_size() const {
  return _internal_positons_size();
}
inline void QIFI::clear_positons() {
  positons_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >&
QIFI::_internal_positons() const {
  return positons_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >&
QIFI::positons() const {
  // @@protoc_insertion_point(field_map:QIFI.positons)
  return _internal_positons();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >*
QIFI::_internal_mutable_positons() {
  return positons_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Position >*
QIFI::mutable_positons() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.positons)
  return _internal_mutable_positons();
}

// map<string, .Trade> trades = 25;
inline int QIFI::_internal_trades_size() const {
  return trades_.size();
}
inline int QIFI::trades_size() const {
  return _internal_trades_size();
}
inline void QIFI::clear_trades() {
  trades_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >&
QIFI::_internal_trades() const {
  return trades_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >&
QIFI::trades() const {
  // @@protoc_insertion_point(field_map:QIFI.trades)
  return _internal_trades();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >*
QIFI::_internal_mutable_trades() {
  return trades_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Trade >*
QIFI::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.trades)
  return _internal_mutable_trades();
}

// map<string, .Transfer> transfers = 26;
inline int QIFI::_internal_transfers_size() const {
  return transfers_.size();
}
inline int QIFI::transfers_size() const {
  return _internal_transfers_size();
}
inline void QIFI::clear_transfers() {
  transfers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >&
QIFI::_internal_transfers() const {
  return transfers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >&
QIFI::transfers() const {
  // @@protoc_insertion_point(field_map:QIFI.transfers)
  return _internal_transfers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >*
QIFI::_internal_mutable_transfers() {
  return transfers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Transfer >*
QIFI::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_map:QIFI.transfers)
  return _internal_mutable_transfers();
}

// int32 ping_gap = 27;
inline void QIFI::clear_ping_gap() {
  ping_gap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QIFI::_internal_ping_gap() const {
  return ping_gap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QIFI::ping_gap() const {
  // @@protoc_insertion_point(field_get:QIFI.ping_gap)
  return _internal_ping_gap();
}
inline void QIFI::_internal_set_ping_gap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ping_gap_ = value;
}
inline void QIFI::set_ping_gap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping_gap(value);
  // @@protoc_insertion_point(field_set:QIFI.ping_gap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_qifi_2eproto
